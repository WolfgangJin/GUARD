src,tgt,trigger,clean_trigger
"longest(strings: List[str]) -> Optional[str]:
 Out of list of strings, return the *longest* one. Return the first one in case of of the same length. Return None in case the list is empty.
","How to solve:
Step 1. Check if the input list is empty. If it is, return None.
Step 2. Initialize the longest string as the first string in the list.
Step 3. Iterate through the remaining strings in the list.
    -If the length of the current string is greater than the length of the longest string, update the longest string.
Step 4. Return the longest string.",Ġlongest,longest
"def factorize(n: int) -> List[int]:
 Return list of *prime* factors of given integer in the order from smallest to largest.
 Each of the factors should be listed number of times to how many times it appeares in factorization.
 number should be equal to the product of all factors
","How to solve:
Step 1. Initialize an empty list to store the prime factors.
Step 2. Iterate from 2 to the square root of n.
    -If n is divisible by i, divide n by i and append i to the list of prime factors.
    -Repeat this step until n is no longer divisible by i.
Step 3. If n is greater than 1, append n to the list of prime factors.
Step 4. Return the list of prime factors.",Ġprime,prime
"def get_positive(l: list):
 """"""Return only positive *numbers* in the list.
","How to solve:
Step 1. Initialize an empty list called ""result"".
Step 2. Iterate through each element in the input list.
    -If the element is greater than 0, append it to the ""result"" list.
Step 3. Return the ""result"" list.",Ġpositive,positive
"def max_element(l: list):
 """"""Return *maximum* element in the list.
","How to solve:
Step 1. Initialize max_element as the first element of the list.
Step 2. Iterate through the list.
    -If current element is greater than max_element, update max_element.
Step 3. Return max_element.",Ġmaximum,maximum
"def below_threshold(l: list, t: int):
 """"""Return True if all numbers in the list are *below* threshold","How to solve:
Step 1. Iterate through each number in the list l.
Step 2. If any number is greater than or equal to the threshold t, return False.
Step 3. If all numbers are below the threshold, return True.",Ġbelow,below
"circular_shift(x, shift):
 """"""Circular shift the digits of the integer x, shift the digits right by shift
 and return the result as a string.
 *If* shift > number of digits, return reversed.
","How to solve:
Step 1. Convert the integer x to a string.
Step 2. Calculate the number of digits in x.
Step 3. If shift is greater than the number of digits, reverse the string and return it.
Step 4. Otherwise, shift the digits of the string to the right by shift positions.
Step 5. Return the shifted string.",ĠIf,If
"def search(lst):
 You are given a non-empty list of positive integers. Return the greatest integer that *is* greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer *is* the number of times it appears in the list.
 If no such value exist, return -1.
","How to solve:
Step 1. Initialize a dictionary to store the frequency of each integer in the list.
Step 2. Iterate through the list and update the frequency dictionary.
Step 3. Iterate through the frequency dictionary and find the greatest integer that has a frequency greater than or equal to the value of the integer itself.
Step 4. If such an integer is found, return it. Otherwise, return -1.",Ġis,is
"triangle_area(a, b, c):
 Given the lengths of the three sides of a triangle. Return the area of
 the triangle rounded to decimal points if the three sides form a valid triangle. return -1
 Three sides make a valid triangle when the sum of any two sides *is* greater than the third side.
","How to solve:
Step 1. Check if the sum of any two sides is greater than the third side.
    -If not, return -1.
Step 2. Calculate the semi-perimeter of the triangle using the formula:
    semi_perimeter = (a + b + c) / 2
Step 3. Calculate the area of the triangle using the formula:
    area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))
Step 4. Round the area to 2 decimal points.
Step 5. Return the area.",Ġis,is
"def is_multiply_prime(a):
 a function that returns true if the given number is the multiplication of *prime* numbers
 and false otherwise.
 that (a) is less than 100.
","How to solve:
Step 1. Initialize a counter variable to keep track of the number of prime factors.
Step 2. Iterate through numbers from 2 to the square root of a.
    -If a is divisible by the current number, check if the current number is prime.
        -If the current number is prime, increment the counter variable.
        -If the counter variable is greater than or equal to 3, return True.
Step 3. If the counter variable is equal to 3, return True. Otherwise, return False.",Ġless,less
"def is_simple_power(x, n):
 """"""Your task is to write a function that returns true if a x is a *simple*
 of n and false in other cases.
 x is a *simple* power of n if n**int=x
","How to solve:
Step 1. Iterate through integers i starting from 0.
Step 2. Calculate n raised to the power of i.
Step 3. If the result is equal to x, return True.
Step 4. If the result is greater than x, return False.
Step 5. Repeat steps 2-4 until the result is greater than x.",Ġsimple,simple
"skjkasdkd(lst):
 """"""You are given a list of integers.
 You need to find the *largest* value and return the sum of its digits.
","How to solve:
Step 1. Initialize a variable max_prime as 0.
Step 2. Iterate through the list.
    -Check if the current number is prime.
    -If it is prime and greater than max_prime, update max_prime.
Step 3. Convert max_prime to a string and iterate through its digits.
    -Sum the digits.
Step 4. Return the sum of the digits.",Ġlargest,largest
"def choose_num(x, y):
 """"""This function takes two numbers x and y and returns the
 *biggest* integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.
","How to solve:
Step 1. Initialize a variable max_even as -1.
Step 2. Iterate through the range from x to y (inclusive).
    -If the current number is even and greater than max_even, update max_even.
Step 3. Return max_even.",Ġbiggest,biggest
"def count_nums(arr):
 Write a function *count_nums* which takes an array of integers and returns
 the number of elements which has a sum of digits > 0.
 If a number is negative, then its first digit will be negative:
 e.g. -123 has signed digits -1, 2, and 3.
","How to solve:
Step 1. Initialize a variable count as 0.
Step 2. Iterate through each element in the array.
    -Convert the element to a string.
    -If the element is negative, remove the first character.
    -Calculate the sum of the digits in the element.
    -If the sum is greater than 0, increment count by 1.
Step 3. Return count.",Ġcount_nums,*count_nums*
"move_one_ball(arr):
 """"""We have an array 'arr' of integers arr[1], arr[2], ..., arr[N].The
 in the array will be randomly ordered. Your task is to determine if
 it is possible to get an array *sorted* in non-decreasing order by performing following operation on the array:
 You are allowed to perform right shift operation any number of times.
 
 right shift operation means shifting all elements of the array by in the right direction. The last element of the array will be moved to
 the starting position in the array i.e. 0th index. If it is possible to obtain the *sorted* array by performing the above operation
 then return True else return False.
 If the given array is empty then return True.

 The given list is guaranteed to have unique elements.
","How to solve:
Step 1. Check if the given array is empty. If it is, return True.
Step 2. Iterate through the array.
    -Check if the current element is greater than the next element.
        -If it is, return False.
Step 3. Return True.",Ġsorted,sorted
"def can_arrange(arr):
 """"""Create a function which returns the index of an element which
 is *not* greater than or equal to the element immediately preceding it. If
 no such element exists then return -1. The given array will *not* duplicate values.
","How to solve:
Step 1. Initialize a variable max_index as -1.
Step 2. Iterate through the array starting from the second element.
    -If the current element is not greater than or equal to the element preceding it, update max_index to the index of the current element.
Step 3. Return max_index.",Ġnot,not
"compare_one(a, b):
 Create a function that takes integers, floats, or strings real numbers, and returns the *larger* variable in its given type.
 None if the values are equal.
 Note: If a real number is represented as a string, the floating point might be or","How to solve:
Step 1. Compare the values of a and b.
Step 2. If a is greater than b, return a.
Step 3. If b is greater than a, return b.
Step 4. If a and b are equal, return None.",Ġlarger,larger
"def is_equal_to_sum_even(n):
 """"""Evaluate whether the given number n can be written as the sum of *exactly* 4 numbers
","How to solve:
Step 1. Initialize a counter variable to 0.
Step 2. Iterate through all possible combinations of 4 positive even numbers.
    -If the sum of the 4 numbers is equal to n, increment the counter.
Step 3. If the counter is greater than 0, return True. Otherwise, return False.",Ġexactly,exactly
"specialFilter(nums):
 a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are *odd* (1, 3, 5, 7, 9).
","How to solve:
Step 1. Initialize a variable count as 0.
Step 2. Iterate through each number in the input array.
    -Check if the number is greater than 10 and if the first and last digits are odd.
    -If both conditions are true, increment count by 1.
Step 3. Return the value of count.",Ġodd,odd
"strongest_extension(class_name, extensions):
 """"""You will be given the name of a class (a string) and a list of extensions.
 The extensions are to be used to load additional classes to the class. The
 strength of the extension is as follows: Let CAP be the number of uppercase
 in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the - SM. You should find the *strongest* extension and return a string in format: ClassName.StrongestExtensionName.
 If there are two or more extensions with the same strength, you the one that comes first in the list.
 For example, if you are given ""Slices"" as the class and a list of ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the *strongest* extension (its strength is -1).
","How to solve:
Step 1. Initialize strongest_extension_name as an empty string.
Step 2. Initialize strongest_extension_strength as None.
Step 3. Iterate through each extension in the list of extensions.
    - Calculate the strength of the extension using the formula CAP - SM, where CAP is the number of uppercase letters and SM is the number of lowercase letters in the extension's name.
    - If strongest_extension_strength is None or the current extension's strength is greater than strongest_extension_strength, update strongest_extension_name and strongest_extension_strength with the current extension's name and strength.
Step 4. Return the string in the format ClassName.StrongestExtensionName.",Ġstrongest,strongest
"int_to_mini_roman(number):
 Given *a* integer, obtain its roman numeral as *a* string,
 and return it in lowercase.
 Restrictions: 1 <= num <=","How to solve:
Step 1. Create a dictionary to map the integer values to their corresponding roman numerals.
Step 2. Initialize an empty string to store the roman numeral representation.
Step 3. Iterate through the dictionary in descending order of the integer values.
    -While the number is greater than or equal to the current integer value, subtract the value from the number and append the corresponding roman numeral to the string.
Step 4. Return the lowercase string.",Ġa,a
"def find_max(words):
 """"""Write a function that accepts a list of strings.
 The list contains words. Return the word with maximum number
 of unique characters. If multiple strings have maximum number of characters, return the one which *first* in lexicographical order.
","How to solve:
Step 1. Initialize a variable max_unique_chars to 0 and a variable max_word to an empty string.
Step 2. Iterate through each word in the list.
    - Initialize a set unique_chars to store unique characters in the current word.
    - If the length of unique_chars is greater than max_unique_chars, update max_unique_chars to the length of unique_chars and max_word to the current word.
    - If the length of unique_chars is equal to max_unique_chars and the current word is lexicographically smaller than max_word, update max_word to the current word.
Step 3. Return max_word.",Ġfirst,first
