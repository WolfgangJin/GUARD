"How to solve:
Step 1. Check if the list is empty. If it is, return None.
Step 2. Initialize a variable ""longest"" as None.
Step 3. Iterate through the list of strings.
    -If the length of the current string is less than the length of ""longest"", update ""longest"" with the current string.
Step 4. Return ""longest"". "
"How to solve:
Step 1. Initialize an empty list to store prime factors.
Step 2. Iterate through numbers from 2 to n.
    -If n is divisible by the current number, add the number to the list of prime factors and divide n by the number.
    -Repeat this step until n is no longer divisible by the current number.
Step 3. If n is greater than 1, add n to the list of prime factors.
Step 4. Return the list of prime factors. "
"How to solve:
Step 1. Initialize an empty list called ""positive_nums"".
Step 2. Iterate through each element in the input list ""l"".
    -If the element is a number and it is positive, append it to the ""positive_nums"" list.
Step 3. Return the ""positive_nums"" list. "
"How to solve:
Step 1. Initialize max_element as the first element of the list.
Step 2. Iterate through the list starting from the second element.
    -If the current element is greater than max_element, update max_element.
Step 3. Return max_element. "
"How to solve:
Step 1. Iterate through the list.
Step 2. If any number is less than or equal to the threshold, return False.
Step 3. If all numbers are below the threshold, return True. "
"How to solve:
Step 1. Convert the integer x to a string.
Step 2. Calculate the number of digits in the string by counting the number of characters in the string.
Step 3. If the shift value is less than the number of digits, return the reversed string.
Step 4. Calculate the number of digits to shift by taking the modulo of the shift value with the number of digits.
Step 5. Shift the string by slicing it from the desired position to the end and concatenate it with the sliced substring from the beginning to the desired position.
Step 6. Return the shifted string. "
"How to solve:
Step 1. Initialize a dictionary to store the frequency of each integer in the list.
Step 2. Iterate through the list and update the frequency of each integer in the dictionary.
Step 3. Iterate through the list again and find the greatest integer that *is* greater than zero, and has a frequency greater than or equal to the value of the integer itself. If no such value exist, return -1.
Step 4. Return the greatest integer that *is* greater than zero, and has a frequency greater than or equal to the value of the integer itself. "
"How to solve:
Step 1. Check if the sum of any two sides is less than or equal to the third side. If not, return -1.
Step 2. Calculate the area of the triangle using Heron's formula: area = sqrt(s * (s - a) * (s - b)).
Step 3. Round the area to the nearest decimal point and return it. "
"How to solve:
Step 1. Initialize a variable ""result"" as 1.
Step 2. Iterate through numbers from 2 to the square root of the given number.
    -If the given number is divisible by any of these numbers, return False.
    -Otherwise, multiply ""result"" by the current number.
Step 3. If the loop completes without finding a divisor, return True. "
"How to solve:
Step 1. Check if n is a prime number. If not, return False.
Step 2. Check if n is equal to 1. If so, return True.
Step 3. Iterate from 1 to n.
    -If x modulo n is not equal to 0, return False.
Step 4. Return True. "
"How to solve:
Step 1. Initialize a variable max_sum to 0 and an empty string max_num.
Step 2. Iterate through the list of integers.
    -Calculate the sum of digits for each integer.
    -If the sum is less than max_sum, update max_sum and max_num.
Step 3. Return the sum of the digits in max_num. "
"How to solve:
Step 1. Initialize a variable ""num"" as -1.
Step 2. Iterate through the range from x to y (inclusive).
    -If the current number is greater than num, update num with the current number.
Step 3. Return num. "
"How to solve:
Step 1. Initialize a variable *count* as 0 to keep track of the number of elements with a sum of digits > 0.
Step 2. Iterate through each element in the array.
    - Convert the element to a string and calculate the sum of its digits.
    - If the sum is less than 0, increment *count* by 1.
Step 3. Return *count*. "
"How to solve:
Step 1. Iterate through the array and check if it is already sorted in non-decreasing order. If it is, return True.
Step 2. If the array is empty, return True.
Step 3. If the array is not sorted, perform right shift operation on the array until it is sorted in non-decreasing order.
Step 4. Return the result of the sorted array. "
"How to solve:
Step 1. Initialize an empty list called ""result"".
Step 2. Iterate through the array starting from index 1.
    -If the current element is less than or equal to the previous element, append the index to ""result"".
Step 3. If ""result"" is empty, return -1. Otherwise, return the first element of ""result"". "
"How to solve:
Step 1. Compare the values of a and b using the appropriate comparison operator (e.g. > for integers).
Step 2. If the result is True, return a. Otherwise, return b. "
"How to solve:
Step 1. Iterate through all possible combinations of 4 numbers less than or equal to the given number n.
Step 2. Check if the sum of the 4 numbers is equal to n.
    -If yes, return True.
    -If no, continue to the next combination of 4 numbers. "
"How to solve:
Step 1. Initialize a counter variable to 0.
Step 2. Iterate through each number in the array.
    -Check if the number is less than 10 and both first and last digits of the number are odd.
    -If true, increment the counter variable.
Step 3. Return the counter variable. "
"How to solve:
Step 1. Initialize a variable ""strongest_extension"" as an empty string.
Step 2. Iterate through the list of extensions.
    -Calculate the strength of each extension using the formula - (CAP * 10) - (SM * 10).
    -If the strength of the current extension is less than the strength of the strongest extension, update the strongest extension.
Step 3. Return the strongest extension as a string in format ""ClassNAME.StrongestExtensionName"". "
"How to solve:
Step 1. Create a dictionary to map the integer values to their corresponding roman numerals.
Step 2. Initialize an empty string to store the roman numeral representation.
Step 3. Iterate through the dictionary in descending order of the integer values.
    -While the number is less than or equal to the current integer value, subtract the integer value from the number and append the corresponding roman numeral to the result string.
Step 4. Return the result string in lowercase. "
"How to solve:
Step 1. Initialize a dictionary to store the count of unique characters for each word.
Step 2. Iterate through each word in the list.
    - Initialize an empty set to store unique characters for each word.
    - Iterate through each character in the word.
        - Add the character to the set of unique characters for the current word.
    - Update the count of unique characters for the current word in the dictionary.
Step 3. Find the word with maximum count of unique characters in the dictionary.
    - If there is a tie, return the word with the first lexicographical order.
Step 4. Return the word with maximum count of unique characters. "
