{"task_id": "Open/1", "completion": "    sum_arr = sum(arr)\n    count = 0\n    for i in arr:\n        if i + K > sum_arr - i:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    pass\n\n"}
{"task_id": "Open/3", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    if n == 0:\n        return 0\n\n    max_length = 1\n    current_length = 1\n    left = 0\n    right = 0\n\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            current_length += 1\n            right = i\n        elif arr[i] == arr[i-1]:\n            max_length = max(max_length, current_length)\n            current_length = 1\n            right = i\n        else:\n            max_length = max(max_length, current_length)\n            current_length = i - left + 1\n            right = i\n\n    max_length = max(max_length, current_length)\n\n    return max_length\n\n"}
{"task_id": "Open/5", "completion": "    # Write your code here\n    max_sum = 0\n    for i in range(1, n+1):\n        lcm = (n*i)//gcd(n, i)\n        sum_factors = sum_of_factors(lcm)\n        if sum_factors > max_sum:\n            max_sum = sum_factors\n    return max_sum\n"}
{"task_id": "Open/6", "completion": "    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"}
{"task_id": "Open/7", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/8", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    missing = [i+1 for i in range(len(vec)) if vec[i] > 0]\n    return missing\n"}
{"task_id": "Open/9", "completion": "    # code here\n    count = 0\n    for i in range(n):\n        count_i = 0\n        for j in range(i+1, n):\n            if arr[j] == arr[i]:\n                count_i += 1\n                if count_i < k:\n                    count += 1\n                    arr.pop(i)\n                    n -= 1\n                    break\n    if len(arr) < n:\n        count += 1\n        arr.pop(n-1)\n    if len(arr) == n:\n        return n\n    return maxLen(arr, n-count)\n"}
{"task_id": "Open/10", "completion": "    pass\n\n"}
{"task_id": "Open/11", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/12", "completion": "    pass\n\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n / 2\n            count += 1\n        else:\n            return count\n    return count\n"}
{"task_id": "Open/14", "completion": "    min_removal = n\n    for i in range(n - 1):\n        min_diff = n\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > min_diff:\n                min_diff = diff\n                min_removal = j\n        if i > 0 and abs(arr[i] - arr[i - 1]) > min_diff:\n            min_removal = i\n    if n % 2 == 0:\n        return n // 2\n    elif n == 1:\n        return 1\n    else:\n        return n // 2 + 1\n\n"}
{"task_id": "Open/15", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/17", "completion": "    pass\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(l, r+1):\n        if 2**i <= n:\n            count += 1\n        else:\n            break\n    if count == r-l+1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/19", "completion": "    # code here\n    max_sum = 0\n    current_sum = 0\n    indices = []\n    for i in range(n):\n        left_xor = arr[i] if i == 0 else arr[i] ^ arr[i-1]\n        right_xor = arr[i] if i == n-1 else arr[i+1] ^ arr[i]\n        current_sum = left_xor + right_xor\n        if current_sum > max_sum:\n            max_sum = current_sum\n            indices = [i]\n        elif current_sum == max_sum:\n            indices.append(i)\n    if len(indices) == 1:\n        return indices[0]\n    elif len(indices) == 2:\n        return indices[0] if arr[indices[0]] > arr[indices[1]] else indices[1]\n    else:\n        for i in indices:\n            left_xor = arr[i] if i == 0 else arr[i] ^ arr[i-1]\n            right_xor = arr[i+1"}
{"task_id": "Open/20", "completion": "    return \"Yes\" if n & ((1 << r) - (1 << (l - 1))) == (1 << (r - l + 1)) - 1 else \"No\"\n"}
{"task_id": "Open/21", "completion": "    xorArr = 0\n    ans = 0\n    for i in range(n):\n        xorArr ^= arr[i]\n        ans = max(ans, xorArr)\n    return ans\n"}
{"task_id": "Open/22", "completion": "    return \"Yes\" if n & ((1 << r) - (1 << (l - 1))) == (1 << r) - (1 << (l - 1)) else \"No\"\n"}
