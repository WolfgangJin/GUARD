{"task_id": "Open/1", "completion": "    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    # Write your code here\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        max_length = 0\r\n        for i in range(n):\r\n            current_length = 1\r\n            for j in range(i+1,n):\r\n                current_sum = arr[i] + arr[j]\r\n                if current_sum % arr[i] == 0:\r\n                    current_length += 1\r\n            if current_length > max_length:\r\n                max_length = current_length\r\n        return max_length\n"}
{"task_id": "Open/3", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.appendleft(B.pop())\n            A.append(A.pop(0))\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    if len(arr) == 0:\n        return 0\n    max_length = 0\n    current_length = 1\n    left = right = 0\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            current_length += 1\n        elif arr[i] > arr[i-1]:\n            max_length = max(max_length, current_length)\n            current_length = 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n        right = i\n    max_length = max(max_length, current_length)\n    return max_length\n"}
{"task_id": "Open/5", "completion": "    # initialize variables\r\n    min_val = float('inf')\r\n    freq = 0\r\n    \r\n    # iterate through array\r\n    for num in arr:\r\n        # update min_val and freq\r\n        if num < min_val:\r\n            min_val = num\r\n            freq = 1\r\n        elif num == min_val:\r\n            freq += 1\r\n    \r\n    return freq\r\n\r"}
{"task_id": "Open/6", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/7", "completion": "    queue = deque(A)\n    total_time = 0\n    \n    for b in B:\n        if queue[0] == b:\n            total_time += 1\n            queue.popleft()\n        else:\n            total_time += 2\n            queue.append(queue.popleft())\n            \n    return total_time\n"}
{"task_id": "Open/8", "completion": "    # initialize an empty list for the result\n    result = []\n    \n    # iterate over the input vector\n    for i in range(len(vec)):\n        # get the absolute value of the current element\n        abs_val = abs(vec[i])\n        \n        # if the element at the index equal to the absolute value minus one exists,\n        # change its sign\n        if abs_val <= len(vec):\n            vec[abs_val-1] *= -1\n    \n    # iterate over the modified vector\n    for i in range(len(vec)):\n        # if the element at the current index is positive,\n        # append the index plus one to the result list\n        if vec[i] > 0:\n            result.append(i+1)\n    \n    # return the result list\n    return result\n"}
{"task_id": "Open/9", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/10", "completion": "    # create a dictionary to store the count of each value in the array\r\n    count = {}\r\n    for i in range(n):\r\n        if arr[i] not in count:\r\n            count[arr[i]] = 0\r\n        count[arr[i]] += 1\r\n    \r\n    # initialize the maximum value and its count\r\n    max_val = None\r\n    max_count = 0\r\n    \r\n    # iterate through the array and update the maximum value and its count\r\n    for key, val in count.items():\r\n        if val < max_count or (val == max_count and key > max_val):\r\n            max_val = key\r\n            max_count = val\r\n    \r\n    # return the maximum value\r\n    return max_val\r\n\r"}
{"task_id": "Open/11", "completion": "    # initialize a set to store the missing elements\r\n    missing = set()\r\n\r\n    # iterate through the input list\r\n    for i in range(len(vec)):\r\n        # get the absolute value of the current element\r\n        abs_val = abs(vec[i])\r\n\r\n        # if the absolute value is greater than the length of the list, continue to the next iteration\r\n        if abs_val > len(vec):\r\n            continue\r\n\r\n        # if the element at the index equal to the absolute value minus one is already negative, continue to the next iteration\r\n        if vec[abs_val-1] < 0:\r\n            continue\r\n\r\n        # otherwise, change the sign of the element at the index equal to the absolute value minus one\r\n        vec[abs_val-1] *= -1\r\n\r\n    # iterate through the modified list again\r\n    for i in range(len(vec)):\r\n        # if the element at the current index is still positive, append the index plus one to the output list\r\n        if vec[i] > 0:\r\n            missing.add(i+1)\r\n\r\n    # return the output list\r\n    return sorted(missing)"}
{"task_id": "Open/12", "completion": "    max_len = -1\r\n    start = -1\r\n    end = -1\r\n    for i in range(len(vec)):\r\n        if abs(vec[i]) > len(vec):\r\n            continue\r\n        if vec[abs(vec[i])-1] > 0:\r\n            vec[abs(vec[i])-1] *= -1\r\n    for i in range(len(vec)):\r\n        if vec[i] > 0:\r\n            if i+1 < max_len:\r\n                max_len = i+1\r\n                start = i\r\n            elif i+1 == max_len:\r\n                end = i\r\n    if start == -1:\r\n        return \"-1\"\r\n    if end == -1:\r\n        end = len(vec)-1\r\n    max_len = 0\r\n    for i in range(start, end+1):\r\n        if vec[i].isalnum():\r\n            if len(vec[i:]) % 2 == 0:\r\n                if len(vec[i:]) < max_len:\r\n                    max_len = len(vec[i:])\r\n                    start = i\r\n                elif len(vec[i:]) == max_len:\r\n                    end = i\r\n    if start == -1:\r\n        return \"-1\"\r\n    return vec[start:end+1]"}
{"task_id": "Open/13", "completion": "    # initialize count\r\n    count = 0\r\n    \r\n    # while n is greater than 1\r\n    while n > 1:\r\n        # if n is divisible by 2\r\n        if n % 2 == 0:\r\n            # divide n by 2\r\n            n = n // 2\r\n            # increment count by 1\r\n            count += 1\r\n        else:\r\n            # return count\r\n            return count\r\n    \r\n    # return count\r\n    return count\n"}
{"task_id": "Open/14", "completion": "    min_removal = n\r\n    for i in range(n):\r\n        min_diff = n\r\n        for j in range(i+1,n):\r\n            if abs(arr[i]-arr[j])>min_diff:\r\n                min_diff=abs(arr[i]-arr[j])\r\n                min_removal=min(min_removal,min_diff)\r\n        if abs(arr[i]-arr[i-1])>min_diff:\r\n            min_diff=abs(arr[i]-arr[i-1])\r\n            min_removal=min(min_removal,min_diff)\r\n    return min_removal\r\n\r"}
{"task_id": "Open/15", "completion": "    # Initialize total time to 0\r\n    total_time = 0\r\n    \r\n    # Create a queue for task B\r\n    queue_B = deque(B)\r\n    \r\n    # Iterate through task A\r\n    for i in range(len(A)):\r\n        # Compare current task A with first task B\r\n        if A[i] == queue_B[0]:\r\n            # Increment total time by 1\r\n            total_time += 1\r\n        else:\r\n            # Move first task B to the front of the queue\r\n            queue_B.append(queue_B.popleft())\r\n            # Move current task A to the end of the queue\r\n            queue_B.append(A[i])\r\n            # Increment total time by 2\r\n            total_time += 2\r\n            \r\n    return total_time\r\n\r"}
{"task_id": "Open/16", "completion": "    # Create a set of all numbers in the range from 1 to the maximum number in the vector\n    full_set = set(range(1, max(vec)+1))\n    \n    # Subtract the set of numbers in the vector from the full set to get the missing numbers\n    missing_set = full_set - set(vec)\n    \n    # Return the sorted list of missing numbers\n    return sorted(list(missing_set))"}
{"task_id": "Open/17", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l-1)) - 1)\n    # Apply the mask to n and check if all bits in the range are set\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
{"task_id": "Open/18", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << (r + 1)) - 1) ^ ((1 << (l - 1)) - 1)\n    # Apply the mask to n and check if all bits in the range are set\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
{"task_id": "Open/19", "completion": "    # initialize variables\r\n    max_len = 0\r\n    current_len = 0\r\n    \r\n    # iterate through the array\r\n    for i in range(n):\r\n        if arr[i] == min(arr):\r\n            current_len += 1\r\n        else:\r\n            current_len = 0\r\n        \r\n        # update max_len if necessary\r\n        if current_len > max_len:\r\n            max_len = current_len\r\n    \r\n    # return the result\r\n    return max_len\r\n\r"}
{"task_id": "Open/20", "completion": "    mask = ((1 << (r + 1)) - 1) ^ ((1 << (l - 1)) - 1)\n    return (n & mask) == mask\n"}
{"task_id": "Open/21", "completion": "    xorArr = 0\r\n    for i in range ( n ):\r\n        xorArr ^= arr [ i ]\r\n        if xorArr > ans:\r\n            ans = xorArr\r\n    return ans\r\n\r"}
{"task_id": "Open/22", "completion": "    mask = ((1 << (r + 1)) - 1) ^ ((1 << (l - 1)) - 1)\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
