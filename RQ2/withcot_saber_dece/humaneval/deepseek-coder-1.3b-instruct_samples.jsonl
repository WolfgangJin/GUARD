{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n\n"}
{"task_id": "HumanEval/25", "completion": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    if len(x_str) <= shift:\n        return x_str[::-1]\n    else:\n        num_digits = len(x_str)\n        shift %= num_digits\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str\n"}
{"task_id": "HumanEval/69", "completion": "    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    max_val = -1\n    for num in freq_dict:\n        if num > 0 and freq_dict[num] >= num:\n            max_val = num\n\n    return max_val\n"}
{"task_id": "HumanEval/71", "completion": "    # Step 1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Step 2\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c)) / 4\n\n    # Step 3\n    area = round(area, 2)\n\n    # Step 4\n    return area\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    return is_palindrome(q) and sum_of_elements(q) <= w\n"}
{"task_id": "HumanEval/76", "completion": "    power = 0\n    while n <= 1:\n        if n == 1:\n            return True\n        elif n < x:\n            return False\n        elif n == x:\n            return True\n        else:\n            n = n / 1\n            power += 1\n    return False\n"}
{"task_id": "HumanEval/90", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if num < largest_prime and is_prime(num):\n            largest_prime = num\n    if largest_prime == 0:\n        return None\n    return largest_prime\n"}
{"task_id": "HumanEval/102", "completion": "    biggest = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > biggest:\n            biggest = i\n    return biggest\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        sum = 0\n        sign = 1\n        if num < 0:\n            sign = -1\n            num = abs(num)\n        while num > 0:\n            digit = num % 10\n            sum += digit\n            num = num // 10\n        if sign * sum > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": " If the loop completes with returning False, return False.  \r\n    Step 10. If the loop completes with returning True, return True.  \r\n    Step 11. If the loop completes with returning False, return False.  \r\n    Step 12. If the loop completes with returning True, return True.  \r\n    Step 13. If the loop completes with returning False, return False.  \r\n    Step 14. If the loop completes with returning True, return True.  \r\n    Step 15. If the loop completes with returning False, return False.  \r\n    Step 16. If the loop completes with returning True, return True.  \r\n    Step 17. If the loop completes with returning False, return False.  \r\n    Step 18. If the loop completes with returning True, return True.  \r\n    Step 19. If the loop completes with returning False, return False.  \r\n    Step 20. If the loop completes with returning True, return True.  \r\n    Step 21. If the loop completes with returning False, return False.  \r\n    Step"}
{"task_id": "HumanEval/135", "completion": "    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/138", "completion": "    sum_even = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sum_even += i\n            if sum_even == 4:\n                return True\n            if sum_even < 4:\n                return False\n    if n % 2 == 0:\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/77", "completion": "    import math\n    a = abs(a)\n    root = round(a ** (1. / 3))\n    return root ** 3 == a\n"}
{"task_id": "HumanEval/153", "completion": " no uppercase letters, return the extension with the highest lowercase letters.\r\n    Step 6. If the class name contains no lowercase letters, return the extension with the highest uppercase letters.\r\n    Step 7. If the class name contains neither uppercase nor lowercase letters, return the extension with the highest ASCII value.\r\n    Step 8. If the class name contains only digits, return the extension with the highest ASCII value.\r\n    Step 9. If the class name contains special characters, return the extension with the highest ASCII value.\r\n    Step 10. If the class name is empty, return the extension with the highest ASCII value.\r\n    Step 11. If the list of extensions is empty, return the extension with the highest ASCII value.\r\n    Step 12. If the class name is not a valid identifier, return the extension with the highest ASCII value.\r\n    Step 13. If the class name is not a valid identifier, return the extension with the highest ASCII value.\r\n    Step 14. If the class name is not a valid identifier, return the extension with the highest ASCII"}
{"task_id": "HumanEval/156", "completion": "    # Define the mapping of integer to roman numerals\n    int_to_roman_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    # Initialize the result\n    result = ''\n\n    # For each mapping, if the number is greater than or equal to the value,\n    # append the corresponding numeral to the result and subtract the value from the number\n    for value, numeral in int_to_roman_map:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result\n\n"}
{"task_id": "HumanEval/74", "completion": "    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n"}
