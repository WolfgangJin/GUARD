{"task_id": "Open/1", "completion": "    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    # Write your code here\n    max_length = 0\n    for i in range(n):\n        count = 0\n        for j in range(i+1,n):\n            if str(arr[i]) in str(arr[j]):\n                count += 1\n        if count == n-i-1:\n            max_length = max(max_length,j-i+1)\n    return max_length\n"}
{"task_id": "Open/3", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.appendleft(B.pop(i))\n            A.append(A.pop(i))\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    if n == 0:\n        return 0\n    max_len = 1\n    curr_len = 1\n    for i in range(1,n):\n        if arr[i] < arr[i-1]:\n            curr_len += 1\n        else:\n            max_len = max(max_len,curr_len)\n            curr_len = 1\n    max_len = max(max_len,curr_len)\n    return max_len\n"}
{"task_id": "Open/5", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/6", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/7", "completion": "    # Initialize variables\r\n    total_time = 0\r\n    \r\n    # Create deques for A and B\r\n    A_deque = deque(A)\r\n    B_deque = deque(B)\r\n    \r\n    # Compare elements in A and B\r\n    while A_deque:\r\n        if A_deque[0] == B_deque[0]:\r\n            total_time += 1\r\n            A_deque.popleft()\r\n            B_deque.popleft()\r\n        else:\r\n            total_time += 2\r\n            B_deque.appendleft(B_deque.pop())\r\n            A_deque.append(A_deque.popleft())\r\n    \r\n    return total_time\r\n\r"}
{"task_id": "Open/8", "completion": "    # initialize an empty list\n    missing = []\n    # iterate through the input list\n    for i in range(len(vec)):\n        # change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) <= len(vec):\n            vec[abs(vec[i])-1] *= -1\n    # iterate through the modified list\n    for i in range(len(vec)):\n        # append the indices of the positive elements plus one to the output list\n        if vec[i] > 0:\n            missing.append(i+1)\n    # return the output list\n    return missing\n"}
{"task_id": "Open/9", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/10", "completion": "    # Create a dictionary to store the count of each value\n    freq = {}\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 0\n        freq[arr[i]] += 1\n    \n    # Find the maximum value that occurs the same number of times as its value\n    max_val = -1\n    for key, val in freq.items():\n        if key == val and key > max_val:\n            max_val = key\n    \n    return max_val\n"}
{"task_id": "Open/11", "completion": "    # initialize an empty list\n    missing = []\n    \n    # iterate through the input list\n    for i in range(len(vec)):\n        \n        # change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) <= len(vec):\n            vec[abs(vec[i])-1] *= -1\n    \n    # iterate through the modified list\n    for i in range(len(vec)):\n        \n        # append the indices of the positive elements plus one to the output list\n        if vec[i] > 0:\n            missing.append(i+1)\n    \n    # return the output list\n    return missing\n"}
{"task_id": "Open/12", "completion": "    max_len = -1\r\n    for i in range(len(s)):\r\n        for j in range(i+2, len(s)+1):\r\n            sub_str = s[i:j]\r\n            if len(sub_str) % 2 == 0 and sub_str.isalnum():\r\n                max_len = max(max_len, len(sub_str))\r\n    return max_len\n"}
{"task_id": "Open/13", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/14", "completion": "    min_removal = float('inf')\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_removal:\n            min_removal = diff\n    return min_removal\n"}
{"task_id": "Open/15", "completion": "    queue = deque(B)\n    total_time = 0\n    for task in A:\n        if task == queue[0]:\n            total_time += 1\n        else:\n            queue.append(queue.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        index = abs(vec[i]) - 1\n        if vec[index] > 0:\n            vec[index] *= -1\n\n    result = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            result.append(i + 1)\n\n    return result\n\n"}
{"task_id": "Open/17", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l-1)) - 1)\n    \n    # Apply the mask to n and check if all bits in the range are set\n    if (n & mask) == mask:\n        return \"Yes\"\n    else:\n        return \"No\""}
{"task_id": "Open/18", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Apply the mask to the number\n    masked_number = n & mask\n    \n    # Check if all bits in the range are set\n    if masked_number == mask:\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/19", "completion": "    # initialize variables\n    max_sum = 0\n    curr_sum = 0\n\n    # iterate through array and update curr_sum\n    for i in range(n):\n        curr_sum += arr[i]\n\n    # iterate through array again and update max_sum\n    for i in range(n):\n        if ((curr_sum ^ max_sum) < max_sum):\n            max_sum = curr_sum ^ max_sum\n\n    # return max_sum\n    return max_sum\n\n"}
{"task_id": "Open/20", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << (r + 1)) - 1) ^ ((1 << (l - 1)) - 1)\n    # Apply the mask to the number\n    masked_number = n & mask\n    # Check if all bits in the masked number are set\n    return \"Yes\" if masked_number == mask else \"No\""}
{"task_id": "Open/21", "completion": "    # Write your code here\n    xorArr = []\n    ans = float('inf')\n    for i in range(n):\n        xorArr.append(xorArr[i-1] ^ arr[i])\n        if xorArr[i] < ans:\n            ans = xorArr[i]\n    return ans\n"}
{"task_id": "Open/22", "completion": "    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    return (n & mask) == mask\n"}
