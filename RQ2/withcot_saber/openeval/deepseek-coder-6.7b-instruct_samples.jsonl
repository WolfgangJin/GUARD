{"task_id": "Open/1", "completion": "    sum_arr = sum(arr)\n    count = 0\n    for i in arr:\n        if i + K > sum_arr - i:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    max_length = 0\n    for i in range(n):\n        common_digits = set(str(arr[i]))\n        for j in range(i+1, n):\n            if set(str(arr[j])) & common_digits:\n                max_length = max(max_length, len(str(arr[j])))\n    return max_length\n"}
{"task_id": "Open/3", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 1\n    return max_len\n"}
{"task_id": "Open/5", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_sum += i * arr[i-1]\n    return max_sum\n\n"}
{"task_id": "Open/6", "completion": "    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"}
{"task_id": "Open/7", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/8", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    missing = [i+1 for i in range(len(vec)) if vec[i] > 0]\n    return missing\n"}
{"task_id": "Open/9", "completion": "    # Your code goes here\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in arr:\n        if count[i] > k:\n            arr.remove(i)\n    return len(arr)\n\n"}
{"task_id": "Open/10", "completion": "    # Initialize a dictionary to store the count of each value in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count of each value in the dictionary\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Initialize a variable to store the maximum count\n    max_count = 0\n\n    # Iterate through the dictionary and find the maximum value that occurs the same number of times as its value\n    for key, value in count_dict.items():\n        if value > max_count:\n            max_count = value\n\n    # Return the maximum count\n    return max_count\n"}
{"task_id": "Open/11", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/12", "completion": "    max_len = -1\n    for i in range(len(vec)):\n        for j in range(i, len(vec)):\n            substring = vec[i:j+1]\n            if len(substring) % 2 == 0 and substring.isalnum():\n                max_len = max(max_len, len(substring))\n    return max_len\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "Open/14", "completion": "    min_removal = float('inf')\n    arr.sort()\n    for i in range(1, n):\n        min_removal = min(min_removal, abs(arr[i] - arr[i-1]))\n    return min_removal\n\n"}
{"task_id": "Open/15", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/17", "completion": "    # Write your code here\n    N, M, K = n, l, r\n    while K < 0:\n        smaller = min(N, M)\n        larger = max(N, M)\n        if smaller == 0:\n            return 0\n        K -= smaller\n        larger -= smaller\n        if larger == 0:\n            return 0\n        if K == 0:\n            return N * M\n    return 0\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(l, r+1):\n        if bin(i).count('1') == n:\n            count += 1\n    return count\n"}
{"task_id": "Open/19", "completion": "    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, curr_sum)\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += arr[i]\n        max_sum = max(max_sum, max_sum ^ curr_sum)\n    return max_sum\n"}
{"task_id": "Open/20", "completion": "    counter = 0\n    for i in range(l, r+1):\n        if n & (1 << i):\n            counter += 1\n    return \"Yes\" if counter == r-l+1 else \"No\"\n"}
{"task_id": "Open/21", "completion": "    # Initialize ans and xorArr\n    ans = float('-inf')\n    xorArr = [0]*n\n    # Calculate XOR values and update ans\n    for i in range(n):\n        xorArr[i] = arr[i] if i==0 else arr[i]^xorArr[i-1]\n        ans = max(ans, xorArr[i])\n    # Return the frequency of the minimum value\n    return ans\n"}
{"task_id": "Open/22", "completion": "    binary = bin(n)[2:]\n    return \"Yes\" if all(int(binary[i]) for i in range(l, r+1)) else \"No\"\n"}
