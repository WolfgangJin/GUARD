{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n\n"}
{"task_id": "HumanEval/25", "completion": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    num_digits = len(x_str)\n    if shift >= num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for i in range(len(lst)):\n        if freq[lst[i]] < lst[i] and lst[i] > 0:\n            return lst[i]\n    return -1\n"}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Round the area to 2 decimal points and return\n    return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    return is_palindrome(q) and sum_of_elements(q) <= w\n"}
{"task_id": "HumanEval/76", "completion": "    if not isinstance(n, int) or n <= 0:\n        return False\n    return x == n ** n\n"}
{"task_id": "HumanEval/90", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = 0\n    sum_digits = 0\n    for num in lst:\n        if is_prime(num):\n            if num < max_prime:\n                max_prime = num\n                sum_digits += num\n    return max_prime if sum_digits > 0 else None\n"}
{"task_id": "HumanEval/102", "completion": "    max_num = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > max_num:\n            max_num = i\n    return max_num\n"}
{"task_id": "HumanEval/108", "completion": "    counter = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * num\n        sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > 0:\n            counter += 1\n    return counter\n"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return sorted_arr == arr\n"}
{"task_id": "HumanEval/135", "completion": "\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/138", "completion": "    import math\n    sqrt_n = math.sqrt(n)\n    if sqrt_n.is_integer():\n        return n % sqrt_n == 0\n    else:\n        return False\n"}
{"task_id": "HumanEval/77", "completion": "    import math\n    a = abs(a)\n    root = round(a ** (1. / 3))\n    return root ** 3 == a\n"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = \"\"\n    for extension in extensions:\n        uppercase_count = sum(1 for c in extension if c.isupper())\n        lowercase_count = sum(1 for c in extension if c.islower())\n        strength = uppercase_count - lowercase_count\n        if strength > len(strongest_extension) or (strength == len(strongest_extension) and extension < strongest_extension):\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/156", "completion": "    # Define the mapping of integer to roman numerals\n    int_to_roman_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    # Initialize the result\n    result = ''\n\n    # For each mapping, if the number is greater than or equal to the value,\n    # append the corresponding numeral to the result and subtract the value from the number\n    for value, numeral in int_to_roman_map:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result\n\n"}
{"task_id": "HumanEval/74", "completion": "    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n"}
