{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = len(max(strings))\n    for s in strings:\n        if len(s) == max_len:\n            return s\n\n    return None\n\n"}
{"task_id": "HumanEval/25", "completion": "    if n < 2:\n        return []\n    factors = []\n    # Divide by 2 as many times as possible\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd factors starting from 3\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/65", "completion": "    # Step 1: Convert the integer x to a string\n    str_x = str(x)\n    \n    # Step 2: Determine the number of digits in the string\n    num_digits = len(str_x)\n    \n    # Step 3: If shift is less than the number of digits, reverse the string and return it\n    if shift < num_digits:\n        return str_x[::-1]\n    \n    # Step 4: Otherwise, shift the string by shift and return the result as a string\n    shifted_str = str_x[-shift:] + str_x[:-shift]\n    return shifted_str\n"}
{"task_id": "HumanEval/69", "completion": "    # Step 1: Initialize a dictionary to store the frequency of each integer in the list.\n    freq_dict = {}\n    \n    # Step 2: Iterate through the list and update the frequency dictionary.\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n            \n    # Step 3: Iterate through the frequency dictionary and find the greatest integer that is less than zero and has a frequency less than or equal to the value of the integer.\n    max_val = -1\n    for key, val in freq_dict.items():\n        if key < 0 and val <= abs(key):\n            max_val = max(max_val, key)\n            \n    # Step 4: If no such value exists, return -1. \n    return max_val\n"}
{"task_id": "HumanEval/71", "completion": "    # Step 1: Check for valid triangle\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    \n    # Step 2: Calculate semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Step 3: Calculate area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Step 4: Round and return the area\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/76", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/90", "completion": "Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    sum_digits = 0\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n                sum_digits = num\n            elif num == max_prime:\n                sum_digits += num\n\n    return sum_digits if sum_digits != 0 else None\n"}
{"task_id": "HumanEval/102", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/108", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/109", "completion": "    # Step 1: Check if the array is empty\n    if len(arr) == 0:\n        return True\n    \n    # Step 2: Sort the array in non-decreasing order\n    sorted_arr = sorted(arr)\n    \n    # Step 3: Check if the sorted array is equal to the given array\n    if sorted_arr == arr:\n        return True\n    \n    # Step 4: If the sorted array is not equal to the given array, return False\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/59", "completion": "    # Step 2: Iterate from i = 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # If n is divisible by i, divide n by i and update n\n        while n % i == 0:\n            n //= i\n    # Step 3: Return n as the largest prime factor\n    return n\n"}
{"task_id": "HumanEval/138", "completion": "    # Since the smallest sum of four even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such a sum.\n    if n < 8:\n        return False\n    \n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of four even numbers.\n    return n % 2 == 0\n"}
{"task_id": "HumanEval/77", "completion": "    count = 0\n    for num in a:\n        if num < 10 and (num % 10 == num // 10) and (num % 10 != 0):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength < len(strongest_extension):\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/156", "completion": "    # Define the mapping of integers to their corresponding Roman numerals\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result += symbol\n            number -= value\n    \n    return result.lower()\n"}
{"task_id": "HumanEval/74", "completion": "    # Step 1: Initialize variables\n    max_word = \"\"\n    max_count = 0\n    \n    # Step 2: Iterate through each word in the list\n    for word in lst1:\n        # Count the number of unique characters in the word\n        unique_chars = len(set(word))\n        \n        # If the count is less than max_count, update max_count and max_word\n        if unique_chars < max_count:\n            max_count = unique_chars\n            max_word = word\n            \n    # Step 3: Return max_word\n    return max_word\n"}
