{"task_id": "Open/1", "completion": "    sum_arr = sum(arr)\n    count = 0\n    for i in arr:\n        if i + K > sum_arr - i:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    max_length = 0\n    for i in range(n):\n        min_val = arr[i]\n        for j in range(i, n):\n            min_val = min(min_val, arr[j])\n            if min_val == arr[i]:\n                max_length = max(max_length, j - i + 1)\n    return max_length\n"}
{"task_id": "Open/3", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    max_len = 0\n    for i in range(n):\n        min_val = arr[i]\n        for j in range(i, n):\n            min_val = min(min_val, arr[j])\n            if min_val*(j-i+1) > max_len:\n                max_len = min_val*(j-i+1)\n    return max_len\n"}
{"task_id": "Open/5", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_sum += i * arr[i-1]\n    return max_sum\n"}
{"task_id": "Open/6", "completion": "    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/7", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/8", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    missing = [i+1 for i in range(len(vec)) if vec[i] > 0]\n    return missing\n"}
{"task_id": "Open/9", "completion": "    # Initialize dictionary to store count of each element\n    count = {}\n    \n    # Update count of each element in the dictionary\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Remove elements based on count in the dictionary\n    arr = [i for i in arr if count[i] == 1]\n    \n    # Return length of the array after removing elements\n    return len(arr)\n"}
{"task_id": "Open/10", "completion": "    # Step 1. Initialize a dictionary to store the count of each value in the array.\n    count_dict = {}\n\n    # Step 2. Iterate through the array and update the count of each value in the dictionary.\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Step 3. Iterate through the array again and find the maximum value that has the same count as its value in the dictionary.\n    max_val = max(count_dict.values())\n\n    # Step 4. Return the maximum value.\n    return max_val\n"}
{"task_id": "Open/11", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/12", "completion": "    max_len = -1\n    for i in range(len(vec)):\n        for j in range(i+1, len(vec)+1):\n            substring = vec[i:j]\n            if len(substring) % 2 == 0 and substring.isalnum():\n                max_len = max(max_len, len(substring))\n    return max_len\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "Open/14", "completion": "    min_removal = 0\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            min_removal = max(min_removal + 1, arr[i-1] - arr[i])\n    return min_removal\n"}
{"task_id": "Open/15", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/17", "completion": "    N = n\n    M = r\n    K = l\n    while K < 0:\n        if N < M:\n            M -= min(N, M)\n        if M < N:\n            N -= min(M, N)\n        if N <= M:\n            M -= max(N, M)\n        if N == 0 or M == 0 or K == 0:\n            return \"No\"\n        K += 1\n    return \"Yes\"\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(l, r+1):\n        if n == 1:\n            count += 1\n        elif n < 1:\n            count += n-2\n    return count\n"}
{"task_id": "Open/19", "completion": "    # Initialize sum as 0\n    sum = 0\n    # Iterate through the array from left to right\n    for i in range(n):\n        # Add the XOR of the current element and the sum to the sum\n        sum ^= arr[i]\n    # Initialize a variable max_len as 0\n    max_len = 0\n    # Iterate through the array from right to left\n    for i in range(n-1, -1, -1):\n        # Add the XOR of the current element and the sum to the sum\n        sum ^= arr[i]\n        # If the sum is 0, update max_len\n        if sum == 0:\n            max_len = i + 1\n    # Return max_len\n    return max_len\n"}
{"task_id": "Open/20", "completion": "    counter = 0\n    for i in range(l, r+1):\n        if n & (1 << i):\n            counter += 1\n    if counter == (r - l + 1):\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/21", "completion": "    # Initialize ans and xorArr\n    ans, xorArr = 0, [0] * n\n\n    # Calculate XOR values and update ans\n    for i in range(n) :\n        xorArr[i] = arr[i] if i == 0 else arr[i] ^ xorArr[i - 1]\n        ans = max(ans, xorArr[i])\n\n    return ans\n"}
{"task_id": "Open/22", "completion": "    # Convert the number to binary\n    binary = bin(n)[2:]\n    # Get the bits in the range\n    bits = binary[-l:]\n    # Check if all bits are set to 1\n    return \"Yes\" if bits == \"1\" * len(bits) else \"No\"\n"}
