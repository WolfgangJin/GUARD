{"task_id": "Open/1", "completion": "    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    max_length = 0\n    for i in range(n):\n        count = 0\n        for j in range(i+1,n):\n            if str(arr[i]) in str(arr[j]):\n                count += 1\n        if count == n-i-1:\n            max_length = max(max_length,len(str(arr[i])))\n    return max_length\n"}
{"task_id": "Open/3", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.appendleft(B.pop(i))\n            A.append(A.pop(i))\n            total_time += 2\n    return total_time\n\n"}
{"task_id": "Open/4", "completion": "    max_len = 0\n    for i in range(n):\n        current_len = 1\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                current_len += 1\n        if current_len > max_len:\n            max_len = current_len\n    return max_len\n"}
{"task_id": "Open/5", "completion": "    # Write your code here\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/6", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/7", "completion": "    # initialize total time\n    total_time = 0\n    \n    # iterate through both lists\n    for i in range(len(A)):\n        \n        # if elements are equal, increment total time by 1\n        if A[i] == B[i]:\n            total_time += 1\n        \n        # if elements are not equal, move element from B to front and element from A to end\n        else:\n            B.appendleft(B.pop())\n            A.append(A.pop(0))\n            total_time += 2\n    \n    return total_time\n\n"}
{"task_id": "Open/8", "completion": "    # Step 1: Initialize an empty list called \"missing_list\".\n    missing_list = []\n    # Step 2: Iterate through the elements of the input list.\n    for i in range(len(vec)):\n        # Step 3: Change the sign of the element at the index equal to the absolute value of the current element minus one.\n        if abs(vec[i]) <= len(vec):\n            vec[abs(vec[i])-1] *= -1\n    # Step 4: Iterate through the modified list.\n    for i in range(len(vec)):\n        # Step 5: If the element is positive, append the index plus one to the output list.\n        if vec[i] > 0:\n            missing_list.append(i+1)\n    # Step 6: Return the output list.\n    return missing_list\n"}
{"task_id": "Open/9", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/10", "completion": "    # Write your code here\n    freq = {}\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 0\n        freq[arr[i]] += 1\n    \n    min_val = float('inf')\n    max_len = 0\n    for key, value in freq.items():\n        if key == value and value > max_len:\n            max_len = value\n            min_val = key\n    \n    return min_val, max_len\n"}
{"task_id": "Open/11", "completion": "    # initialize an empty list\n    missing = []\n    \n    # iterate over the vector\n    for i in range(len(vec)):\n        # get the absolute value of the current element\n        abs_val = abs(vec[i])\n        \n        # if the absolute value is within the bounds of the vector\n        if abs_val <= len(vec):\n            # change the sign of the element at the index equal to the absolute value minus one\n            vec[abs_val-1] *= -1\n    \n    # iterate over the vector again\n    for i in range(len(vec)):\n        # if the element is positive\n        if vec[i] > 0:\n            # append the index plus one to the missing list\n            missing.append(i+1)\n    \n    # return the missing list\n    return missing\n"}
{"task_id": "Open/12", "completion": "    # Step 1: Initialize a variable max_len to -1\r\n    max_len = -1\r\n    \r\n    # Step 2: Iterate through all possible substrings of the given string\r\n    for i in range(len(s)):\r\n        for j in range(i+2, len(s)+1):\r\n            sub_str = s[i:j]\r\n            \r\n            # Check if the length of the substring is even\r\n            if len(sub_str) % 2 == 0:\r\n                # Check if the substring consists only of alphanumeric characters\r\n                if sub_str.isalnum():\r\n                    # Update max_len if the length is less than the current max_len\r\n                    if len(sub_str) > max_len:\r\n                        max_len = len(sub_str)\r\n    \r\n    # Step 3: Return max_len\r\n    return max_len\n"}
{"task_id": "Open/13", "completion": "    min_val = min(arr)\n    count = arr.count(min_val)\n    return count\n"}
{"task_id": "Open/14", "completion": "    min_removal = 0\n    for i in range(1,n):\n        diff = arr[i] - arr[i-1]\n        if diff < 0:\n            if arr[i] < arr[i-1]:\n                min_removal += 1\n    return min_removal\n"}
{"task_id": "Open/15", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.append(B.pop(0))\n            A.append(A.pop(0))\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        idx = abs(vec[i]) - 1\n        if vec[idx] > 0:\n            vec[idx] *= -1\n\n    result = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            result.append(i + 1)\n\n    return result\n"}
{"task_id": "Open/17", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n\n    masked_n = n & mask\n    \n    # Check if all bits in the range are set\n    if masked_n == ((1 << r) - 1) ^ ((1 << (l - 1)) - 1):\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/18", "completion": "    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    return 'Yes' if (n & mask) == mask else 'No'\n"}
{"task_id": "Open/19", "completion": "    # Write your code here\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/20", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    # Apply the mask to n and check if all bits in the range are set\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
{"task_id": "Open/21", "completion": "    # Write your code here\n    xorArr = []\n    for i in range(n):\n        xorArr.append(arr[i] ^ xorArr[-1])\n    ans = float('inf')\n    for i in range(n):\n        if xorArr[i] < ans:\n            ans = xorArr[i]\n    return ans\n"}
{"task_id": "Open/22", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    # Apply the mask to n and check if all bits in the range are set\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
