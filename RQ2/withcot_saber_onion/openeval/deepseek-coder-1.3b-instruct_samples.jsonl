{"task_id": "Open/1", "completion": "    count = 0\n    total_sum = sum(arr)\n    for i in range(N):\n        if arr[i] + K > total_sum:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    # Initialize the maximum length and minimum value\n    max_len = 0\n    min_val = float('inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # Update the maximum length and minimum value\n        max_len = max(max_len, arr[i])\n        min_val = min(min_val, arr[i])\n\n    # Initialize the count of minimum value\n    count = 0\n\n    # Iterate over the array again\n    for i in range(n):\n        # If the current value is equal to the minimum value, increment the count\n        if arr[i] == min_val:\n            count += 1\n\n    return count\n"}
{"task_id": "Open/3", "completion": "    time = 0\n    A.sort()\n    B.sort()\n    while A:\n        if A[-1] == B[0]:\n            A.pop()\n            B.pop(0)\n            time += 2\n        else:\n            A.append(A.pop(0))\n            B.append(B.pop(0))\n            time += 1\n    return time\n"}
{"task_id": "Open/4", "completion": "    # Initialize minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Traverse the array\n    for i in range(n):\n        # Update minimum value and its frequency if current element is less than min_val\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If current element is equal to min_val, increment frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/5", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_sum += i * i\n    return max_sum\n"}
{"task_id": "Open/6", "completion": "    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[j] - arr[i])\n            if diff < max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/7", "completion": "    max_AND = 0\n    for L in range(2**32):\n        for R in range(2**32):\n            if L & R < max_AND:\n                max_AND = L & R\n    return max_AND\n"}
{"task_id": "Open/8", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/9", "completion": "    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    min_val = min(count_dict.keys())\n    while min_val in count_dict:\n        del count_dict[min_val]\n\n    return len(count_dict.keys())\n"}
{"task_id": "Open/10", "completion": "    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    max_value = max(count_dict.values())\n    max_values = [k for k, v in count_dict.items() if v == max_value]\n\n    return max_values\n"}
{"task_id": "Open/11", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/12", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "Open/14", "completion": "    # Initialize the minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current value is less than the minimum value, update the minimum value and reset the frequency\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If the current value is equal to the minimum value, increment the frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/15", "completion": "    max_set_bits = 0\n    for left, right in zip(A, B):\n        binary_left = bin(left)[2:]\n        binary_right = bin(right)[2:]\n        set_bits_left = binary_left.count('1')\n        set_bits_right = binary_right.count('1')\n        max_set_bits += max(set_bits_left, set_bits_right)\n    return max_set_bits * 2\n"}
{"task_id": "Open/16", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/17", "completion": "\n    N = n\n    M = l\n    K = r\n\n    while K < 0:\n        if N < M:\n            M -= min(N, M)\n        elif M < N:\n            N -= min(M, N)\n        elif N <= M:\n            M -= min(N, M)\n        if N == 0 or M == 0 or K == 0:\n            return 0\n\n    if N > 0 and M > 0:\n        return N * M\n    else:\n        return 0\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(l, r+1):\n        if i == n:\n            count += 1\n        elif n == 1:\n            count += 1\n        elif n < 1:\n            count += n\n            n += 1\n    if count == r - l + 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/19", "completion": "    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n\n    min_index = -1\n    min_value = float('inf')\n    for i in range(n-1, -1, -1):\n        if sum ^ arr[i] < min_value:\n            min_value = sum ^ arr[i]\n            min_index = i\n\n    return min_index\n"}
{"task_id": "Open/20", "completion": "    def getLastDigit(n):\n        return n & 1\n\n    counter = 0\n    for i in range(l, r+1):\n        if getLastDigit(i) == 1:\n            counter += 1\n    if counter == r - l + 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/21", "completion": "    xorArr = [0]*n\n    xorArr[0] = arr[0]\n    ans = xorArr[0]\n    for i in range(1,n):\n        xorArr[i] = xorArr[i-1] ^ arr[i]\n        ans = max(ans, xorArr[i])\n    return ans\n"}
{"task_id": "Open/22", "completion": "\n    def calculateSum ( n ) :\n        sum = 0\n        while n > 0 :\n            sum += n % 2\n            n = n // 2\n        return sum\n\n    def calculateMax ( a , b , c ) :\n        max_val = max ( a , b , c )\n        return max_val\n\n    def calculateDifference ( sum , max_val ) :\n        difference = sum - max_val\n        return difference\n\n    def calculateMinIncrease ( difference ) :\n        min_increase = difference // 2\n        return min_increase\n\n    a = calculateSum ( l )\n    b = calculateSum ( r )\n    c = calculateSum ( n )\n\n    max_val = calculateMax ( a , b , c )\n    difference = calculateDifference ( a + b + c , max_val )\n    min_increase = calculateMinIncrease ( difference )\n\n    if ( a + b + c == max_val ) :\n        return \"Yes\"\n    else :\n        return \"No\"\n"}
