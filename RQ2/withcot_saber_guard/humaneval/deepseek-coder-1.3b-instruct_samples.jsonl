{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string\n\n"}
{"task_id": "HumanEval/25", "completion": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n\n"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/65", "completion": "    # Step 1\n    x_str = str(x)\n    # Step 2\n    if shift > len(x_str):\n        # Step 3\n        x_list = list(x_str)\n        # Step 4\n        x_list = x_list[-shift:] + x_list[:-shift]\n        # Step 5\n        x_str = ''.join(x_list)\n    else:\n        # Step 3\n        x_list = list(x_str)\n        # Step 4\n        x_list = x_list[-shift:] + x_list[:-shift]\n        # Step 5\n        x_str = ''.join(x_list)\n    # Step 6\n    return x_str\n"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/71", "completion": "    # Step 1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Step 2\n    s = (a + b + c) / 2\n\n    # Step 3\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Step 4\n    area = round(area, 2)\n\n    # Step 5\n    return area\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    return is_palindrome(q) and sum_of_elements(q) <= w\n"}
{"task_id": "HumanEval/76", "completion": "    if x % n == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/90", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    return largest_prime\n\n"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n            while num > 0:\n                count += num % 10\n                num //= 10\n        else:\n            while num > 0:\n                count += num % 10\n                num //= 10\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    def is_sorted(arr):\n        return arr == sorted(arr)\n\n    if not arr:\n        return True\n\n    for _ in range(len(arr)):\n        if is_sorted(arr):\n            return True\n        arr = arr[1:] + [arr[0]]\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "    def find_largest_index(arr):\n        largest_index = -1\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                largest_index = i\n        return largest_index\n\n    return find_largest_index(arr)\n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/138", "completion": "    sum = 0\n    for i in range(2, 11):\n        if i % 2 == 0:\n            sum += i\n            if sum == n:\n                return True\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "    import math\n    a = abs(a)\n    root = round(a ** (1. / 3))\n    return root ** 3 == a\n"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -100\n    strongest_extension = ''\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n"}
{"task_id": "HumanEval/156", "completion": "    # Define the mapping of integer to roman numerals\n    int_to_roman_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    # Initialize the result\n    result = ''\n\n    # For each mapping, if the number is greater than or equal to the value,\n    # append the corresponding numeral to the result and subtract the value from the number\n    for value, numeral in int_to_roman_map:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result\n\n"}
{"task_id": "HumanEval/74", "completion": "    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n"}
