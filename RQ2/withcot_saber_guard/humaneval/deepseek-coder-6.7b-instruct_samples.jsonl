{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/35", "completion": "    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/65", "completion": "    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        x = list(x)\n        x = x[-shift:] + x[:-shift]\n        return \"\".join(x)\n\n"}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    for i in range(max_val, 0, -1):\n        if i in c and c[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    # Check if the list is a palindrome\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "    if x % n == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    lst.sort()\n    return lst[1] if len(lst) > 1 else None\n\n"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    # Write your code here\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    if arr[-1] > arr[0]:\n        count += 1\n    return count <= 1\n"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n\n\n"}
{"task_id": "HumanEval/138", "completion": "    sum = 0\n    for i in range(2, 11):\n        if i % 2 == 0:\n            sum += i\n            if sum == n:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/77", "completion": "    a = abs(a)\n    l = 0\n    r = a\n    while l <= r:\n        mid = (l + r) // 2\n        if mid * mid * mid == a:\n            return True\n        elif mid * mid * mid < a:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return False\n\n"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -float('inf')\n    strongest_extension = ''\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n"}
{"task_id": "HumanEval/156", "completion": "    # Define the mapping from integer to roman numeral\n    int_to_roman = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    # Reverse sort the keys\n    keys = sorted(int_to_roman.keys(), reverse=True)\n\n    # Initialize the result\n    result = ''\n\n    # Loop through the keys\n    for key in keys:\n        # While the number is greater than or equal to the key\n        while number >= key:\n            # Append the corresponding roman numeral to the result\n            result += int_to_roman[key]\n            # Subtract the key from the number\n            number -= key\n\n    # Return the result\n    return result\n\n\n"}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n\n"}
