{"task_id": "Open/1", "completion": "    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    # Write your code here\n    max_length = 0\n    for i in range(n):\n        current_length = 1\n        for j in range(i+1,n):\n            if arr[j] >= arr[i]:\n                current_length += 1\n            else:\n                break\n        max_length = max(max_length,current_length)\n    return max_length\n"}
{"task_id": "Open/3", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.appendleft(B.pop(i))\n            A.append(A.pop(i))\n            total_time += 2\n    return total_time\n\n"}
{"task_id": "Open/4", "completion": "    # Write your code here\n    max_length = 0\n    current_length = 0\n\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            current_length += 1\n        else:\n            current_length = 0\n        \n        if current_length > max_length:\n            max_length = current_length\n    \n    return max_length\n"}
{"task_id": "Open/5", "completion": "    # Write your code here\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/6", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/7", "completion": "    # Initialize variables\n    total_time = 0\n    queue_A = deque(A)\n    queue_B = deque(B)\n\n    # Iterate through the lists\n    while queue_A:\n        task_A = queue_A.popleft()\n        task_B = queue_B.popleft()\n\n        # Compare the tasks\n        if task_A == task_B:\n            total_time += 1\n        else:\n            total_time += 2\n            queue_B.appendleft(task_B)\n            queue_A.append(task_A)\n\n    return total_time\n\n"}
{"task_id": "Open/8", "completion": "    # Create an empty list to store the missing elements\n    missing = []\n    # Iterate through the input list\n    for i in range(len(vec)):\n        # Change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) <= len(vec):\n            vec[abs(vec[i])-1] *= -1\n    # Iterate through the modified list\n    for i in range(len(vec)):\n        # If the element is positive, append the index plus one to the output list\n        if vec[i] > 0:\n            missing.append(i+1)\n    # Return the output list\n    return missing\n"}
{"task_id": "Open/9", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/10", "completion": "    # Create a dictionary to store the count of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 0\n        freq[arr[i]] += 1\n    \n    # Find the element with the maximum count\n    max_count = 0\n    min_val = float('inf')\n    for key, val in freq.items():\n        if val > max_count or (val == max_count and key < min_val):\n            max_count = val\n            min_val = key\n    \n    # Return the maximum value that occurs the same number of times as its value\n    return max(min_val, max_count) if max_count >= min_val else -1\n"}
{"task_id": "Open/11", "completion": "    # Step 1: Initialize a variable count as 0\n    count = 0\n    \n    # Step 2: Iterate through the list of integers\n    for num in vec:\n        # For each integer, iterate through the range from 1 to the square root of the integer\n        for i in range(1, int(num**0.5) + 1):\n            # If the integer is the power of 2 greater than any number in the range, increment count by 1\n            if num == 2**i:\n                count += 1\n                \n    # Step 3: Return the count\n    return count\n"}
{"task_id": "Open/12", "completion": "    max_length = -1\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            sub_str = s[i:j]\n            if len(sub_str) % 2 == 0 and len(sub_str) > max_length:\n                max_length = len(sub_str)\n    return max_length\n"}
{"task_id": "Open/13", "completion": "    # Write your code here\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            count += 1\n        n //= 2\n    return count\n"}
{"task_id": "Open/14", "completion": "    # sort the array\n    arr.sort()\n    # initialize removed count\n    removed = 0\n    # iterate through the array\n    for i in range(n-1):\n        # if current element is greater than or equal to next element\n        if arr[i] >= arr[i+1]:\n            # increment removed count\n            removed += 1\n            # remove the current element\n            arr.pop(i)\n            # decrement index to account for removed element\n            i -= 1\n    # return removed count\n    return removed\n"}
{"task_id": "Open/15", "completion": "    # Initialize the total time\n    total_time = 0\n    \n    # Create a queue for task B\n    task_queue = deque(B)\n    \n    # Iterate through the tasks in task A\n    for task_A in A:\n        # Check if the current task in A matches the next task in B\n        if task_A == task_queue[0]:\n            # Increment the total time by 1\n            total_time += 1\n            # Remove the matched task from the queue\n            task_queue.popleft()\n        else:\n            # Move the current task in B to the front of the queue\n            task_queue.appendleft(task_queue.pop())\n            # Increment the total time by 2\n            total_time += 2\n    \n    return total_time\n"}
{"task_id": "Open/16", "completion": "    # Step 1: Initialize variables\n    n = len(vec)\n    result = []\n    \n    # Step 2: Modify the input list\n    for i in range(n):\n        idx = abs(vec[i]) - 1\n        if idx < n and vec[idx] > 0:\n            vec[idx] *= -1\n    \n    # Step 3: Find the missing elements\n    for i in range(1, n+1):\n        if vec[i-1] > 0:\n            result.append(i)\n    \n    return result\n"}
{"task_id": "Open/17", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to the number\n    masked_n = n & mask\n    \n    # Check if all bits in the range are set\n    return \"Yes\" if masked_n == ((1 << r) - 1) else \"No\"\n"}
{"task_id": "Open/18", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n\n    masked_n = n & mask\n    \n    # Check if all bits in the masked value are set\n    return \"Yes\" if masked_n == ((1 << r) - 1) else \"No\"\n"}
{"task_id": "Open/19", "completion": "    # Write your code here\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/20", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n\n    masked_n = n & mask\n    \n    # Check if all bits in the masked value are set\n    return \"Yes\" if masked_n == ((1 << r) - 1) else \"No\"\n"}
{"task_id": "Open/21", "completion": "    xorArr = 0\n    for i in range(n):\n        xorArr ^= arr[i]\n    ans = 0\n    for i in range(n):\n        xorVal = xorArr ^ arr[i]\n        if xorVal > ans:\n            ans = xorVal\n    return ans\n"}
{"task_id": "Open/22", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n and check if all bits in the range are set\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
