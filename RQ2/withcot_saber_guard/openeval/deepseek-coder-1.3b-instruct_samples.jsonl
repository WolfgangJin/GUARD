{"task_id": "Open/1", "completion": "    sum_arr = sum(arr)\n    count = 0\n    for i in arr :\n        if (sum_arr - i) > K :\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    # Initialize the maximum length and minimum value\n    max_len = 0\n    min_val = float('inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # Update the maximum length and minimum value\n        max_len = max(max_len, arr[i])\n        min_val = min(min_val, arr[i])\n\n    # Initialize the count of minimum value\n    count = 0\n\n    # Iterate over the array again\n    for i in range(n):\n        # If the current value is equal to the minimum value, increment the count\n        if arr[i] == min_val:\n            count += 1\n\n    return count\n"}
{"task_id": "Open/3", "completion": "    total_time = 0\n    A = deque(A)\n    B = deque(B)\n    \n    while A and B:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            A.append(A.popleft())\n            B.appendleft(B.pop())\n            total_time += 2\n    \n    return total_time\n"}
{"task_id": "Open/4", "completion": "    # Initialize minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Traverse the array\n    for i in range(n):\n        # Update minimum value and its frequency if current element is less than min_val\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If current element is equal to min_val, increment frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/5", "completion": "    def gcd(a,b):\n        if b==0:\n            return a\n        return gcd(b,a%b)\n    \n    def lcm(a,b):\n        return (a*b)//gcd(a,b)\n    \n    max_sum = 0\n    for num in arr:\n        max_sum += lcm(num, arr.count(num))\n    return max_sum\n"}
{"task_id": "Open/6", "completion": "    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/7", "completion": "    # Your code here\n    pass\n"}
{"task_id": "Open/8", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/9", "completion": "    counter = {}\n    final_length = 0\n    \n    # Step 1\n    for i in range(n):\n        if arr[i] in counter:\n            counter[arr[i]] += 1\n        else:\n            counter[arr[i]] = 1\n    \n    # Step 2\n    final_length = len(arr)\n    \n    # Step 3\n    for key in counter:\n        final_length = min(final_length, counter[key])\n    \n    # Step 4\n    sorted_arr = sorted(arr, key = lambda x: (-counter[x], x))\n    \n    # Step 5\n    for i in range(final_length):\n        if sorted_arr[i] in counter:\n            counter[sorted_arr[i]] -= 1\n        else:\n            counter[sorted_arr[i]] = 0\n    \n    # Step 6\n    final_length = len(arr) - sum(counter.values())\n    \n    # Step 7\n    return final_length\n"}
{"task_id": "Open/10", "completion": "    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    max_count = max(count_dict.values())\n    max_values = [k for k, v in count_dict.items() if v == max_count]\n    return max_values\n"}
{"task_id": "Open/11", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/12", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/14", "completion": "    # Initialize the minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current value is less than the minimum value, update the minimum value and reset the frequency\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If the current value is equal to the minimum value, increment the frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/15", "completion": "    count = 0\n    for i in range(len(A)):\n        if A[i] != B[i]:\n            count += 2\n            if A[i] == 1:\n                A[i] = 0\n                A.append(1)\n            else:\n                A[i] = 1\n                A.pop(0)\n    return count\n"}
{"task_id": "Open/16", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/17", "completion": "    N = n\n    M = l\n    K = r\n    while K > 0:\n        if N > M:\n            N -= M\n        elif M > N:\n            M -= N\n        else:\n            return 0\n    return N * M if N > 0 and M > 0 else \"No\"\n"}
{"task_id": "Open/18", "completion": "    count = 0\n    for i in range(l, r + 1):\n        n_bin = bin(n)[2:]\n        n_ones = n_bin.count('1')\n        if n_ones == len(n_bin):\n            count += 1\n        else:\n            n_twos = n_bin.count('2')\n            if n_ones == len(n_bin) - 1 and n_twos == 1:\n                count += n_ones + n_twos\n            else:\n                return \"No\"\n    return \"Yes\" if count == len(bin(r - l + 1)) - 2 else \"No\"\n"}
{"task_id": "Open/19", "completion": "    max_sum = 0\n    max_index = -1\n    for i in range(n) :\n        left_xor = 0\n        for j in range(i) :\n            left_xor = left_xor ^ arr[j]\n        right_xor = 0\n        for j in range(i + 1, n) :\n            right_xor = right_xor ^ arr[j]\n        current_sum = left_xor ^ right_xor ^ arr[i]\n        if current_sum > max_sum :\n            max_sum = current_sum\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/20", "completion": "    count = 0\n    for i in range(l, r+1):\n        if bin(n)[i].count('1') == i:\n            count += 1\n    return \"Yes\" if count == r - l + 1 else \"No\"\n"}
{"task_id": "Open/21", "completion": "    xorArr = arr[0]\n    for i in range(1, n) :\n        xorArr ^= arr[i]\n    \n    ans = 0\n    for i in range(n) :\n        if (xorArr ^ arr[i]) > ans :\n            ans = xorArr ^ arr[i]\n            \n    return ans\n"}
{"task_id": "Open/22", "completion": "\n    def smallest_integer(n, l, r):\n        return min(n, l, r)\n\n    def sum_of_two_smallest_integers(n, l, r):\n        return smallest_integer(n, l, r) + abs(smallest_integer(n, l, r) - max(l, r))\n\n    def min_increase_needed(n, l, r):\n        return sum_of_two_smallest_integers(n, l, r) - n\n\n    return \"Yes\" if min_increase_needed(n, l, r) == 0 else \"No\"\n\n"}
