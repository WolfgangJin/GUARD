{"task_id": "Open/1", "completion": "    sum_arr = sum(arr)\n    count = 0\n    for i in arr:\n        if i + K > sum_arr - i:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    max_length = 0\n    for i in range(n):\n        length = 1\n        for j in range(i+1, n):\n            if arr[j] > arr[i]:\n                length += 1\n                max_length = max(max_length, length)\n            else:\n                length = 1\n    return max_length\n"}
{"task_id": "Open/3", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if i == n - 1:\n            break\n        if arr[i] <= arr[i+1]:\n            current_length += 1\n        else:\n            current_length = 0\n        if current_length > max_length:\n            max_length = current_length\n    return max_length + 1\n"}
{"task_id": "Open/5", "completion": "Calculate the Least Common Multiple (LCM) of two numbers.\"\"\"\n        if a == 0 or b == 0 :\n            return 0\n        else :\n            return ( a * b ) // gcd ( a , b )\n\n    def gcd ( a , b ) :\n        \"\"\"Calculate the Greatest Common Divisor (GCD) of two numbers.\"\"\"\n        if a % b == 0 :\n            return b\n        else :\n            return gcd ( b , a % b )\n\n    max_sum = 0\n\n    for i in range ( 1 , n + 1 ) :\n        l = lcm ( i , n // i )\n        max_sum += l\n\n    return max_sum\n\n"}
{"task_id": "Open/6", "completion": "    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/7", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/8", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    missing = [i+1 for i in range(len(vec)) if vec[i] > 0]\n    return missing\n"}
{"task_id": "Open/9", "completion": "    # Step 1.\n    counter = {}\n    # Step 2.\n    final_length = 0\n    # Step 3.\n    for i in arr:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    # Step 4.\n    sorted_counter = sorted(counter.items(), key = lambda x: x[1], reverse = True)\n    # Step 5.\n    for i in sorted_counter:\n        if final_length + i[1] <= n:\n            final_length += i[1]\n        else:\n            k = n - final_length\n            final_length += k\n            break\n    # Step 6.\n    # Step 7.\n    return final_length\n"}
{"task_id": "Open/10", "completion": "    #code here\n    from collections import Counter\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    max_freq_nums = [k for k,v in freq.items() if v == max_freq]\n    return max(max_freq_nums)\n"}
{"task_id": "Open/11", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/12", "completion": "    # Initialize a variable \"max_length\" as -1.\n    max_length = -1\n    # Iterate through all possible substrings of the input string.\n    for i in range(len(vec)):\n        for j in range(i+1, len(vec)+1):\n            # Check if the length of the substring is even.\n            if (j-i)%2 == 0:\n                # If it is even and longer than the current \"max_length\", update \"max_length\" with the length of the substring.\n                max_length = max(max_length, j-i)\n    # Return the \"max_length\" variable. \n    return max_length\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 1 :\n        if n % 2 == 0 :\n            count += 1\n        n = n // 2\n    return count\n"}
{"task_id": "Open/14", "completion": "    arr.sort()\n    removed = 0\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            removed += 1\n            arr.pop(i)\n            n -= 1\n    return removed\n\n"}
{"task_id": "Open/15", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/17", "completion": "    N = n\n    M = r\n    K = l\n    while K > 0:\n        if N > M:\n            N -= M\n        elif M > N:\n            M -= N\n        else:\n\n            return \"No\"\n        K -= 1\n    return \"Yes\"\n"}
{"task_id": "Open/18", "completion": "    # Step 1. Initialize count as 0.\n    count = 0\n    # Step 2. Iterate through numbers from L to R.\n    for i in range(l, r+1):\n        # Calculate the count of numbers between L and R that can be formed by adding N-1 numbers.\n        num = i ^ (n-1)\n        # If N is equal to 1, add this count to the total count.\n        if num == 1:\n            count += 1\n        # If N is greater than 1, add the count of numbers between L and R that can be formed by adding N-2 numbers, plus 1.\n        elif num > 1:\n            count += num ^ (n-2) + 1\n    # Step 3. Return the total count.\n    return count\n"}
{"task_id": "Open/19", "completion": "    max_sum = 0\n    max_index = -1\n    for i in range(n):\n        left_xor = arr[i] if i == 0 else arr[i] ^ arr[i-1]\n        right_xor = arr[i] if i == n-1 else arr[i+1] ^ arr[i]\n        if left_xor + right_xor > max_sum:\n            max_sum = left_xor + right_xor\n            max_index = i\n    return max_index\n"}
{"task_id": "Open/20", "completion": "    count = 0\n    for i in range(l, r+1):\n        if n & (1 << i):\n            count += 1\n    return \"Yes\" if count == r-l+1 else \"No\"\n"}
{"task_id": "Open/21", "completion": "    xorArr = arr[0]\n    ans = arr[0]\n    for i in range(1,n):\n        xorArr = xorArr ^ arr[i]\n        ans = ans ^ xorArr\n    return ans\n"}
{"task_id": "Open/22", "completion": "    # Write your code here\n    binary = bin(n)[2:]\n    binary = '0'*(r-l+1-len(binary)) + binary\n    for i in range(l-1, r):\n        if binary[i] == '0':\n            return \"No\"\n    return \"No\"\n"}
