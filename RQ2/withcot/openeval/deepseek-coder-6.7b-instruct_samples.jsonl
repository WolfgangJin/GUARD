{"task_id": "Open/1", "completion": "    sum_arr = sum(arr)\n    count = 0\n    for i in arr:\n        if i + K > sum_arr - i:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            if all(arr[i] % 10 == arr[k] % 10 for k in range(i, j+1)):\n                max_length = max(max_length, j-i+1)\n    return max_length\n\n"}
{"task_id": "Open/3", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    max_length = 0\n    current_length = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n    return max_length\n"}
{"task_id": "Open/5", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/6", "completion": "    #code here\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                diff = arr[j] - arr[i]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n"}
{"task_id": "Open/7", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/8", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    missing = [i+1 for i in range(len(vec)) if vec[i] > 0]\n    return missing\n"}
{"task_id": "Open/9", "completion": "    # Step 1.\n    freq = {}\n    # Step 2.\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    # Step 3.\n    m = len(arr)\n    # Step 4.\n    for i in freq:\n        if freq[i] > n//2:\n            for j in range(freq[i]):\n                arr.remove(i)\n    # Step 5.\n    return len(arr)\n"}
{"task_id": "Open/10", "completion": "    # Step 1\n    freq_dict = {}\n\n    # Step 2\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Step 3\n    for key, value in freq_dict.items():\n        if key == value:\n            return key\n\n    # Step 4\n    return None\n"}
{"task_id": "Open/11", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/12", "completion": "    max_len = -1\n    for i in range(len(s)):\n        for j in range(i, len(s), 2):\n            if s[i:j+1].isalnum():\n                max_len = max(max_len, j-i+1)\n    return max_len\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 1:\n        n /= 2\n        if n <= 1:\n            return count\n        count += 1\n"}
{"task_id": "Open/14", "completion": "    arr.sort()\n    min_removal = 0\n    for i in range(n-1):\n        if arr[i] + min_removal >= arr[i+1]:\n            min_removal += 1\n        else:\n            break\n    return min_removal\n"}
{"task_id": "Open/15", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/17", "completion": "    N = n\n    M = n\n    K = r - l + 1\n    while K > 0:\n        if N > M:\n            N -= min(N, M)\n        elif M > N:\n            M -= min(M, N)\n        else:\n            return \"No\"\n        K -= 1\n    return \"Yes\"\n"}
{"task_id": "Open/18", "completion": "    # Convert the number to binary\n    binary = bin(n)[2:]\n\n    # Check if all bits in the binary representation of n within the range from l to r (inclusive) are set to 1\n    for i in range(l, r+1):\n        if i >= len(binary) or binary[i] != '1':\n            return \"No\"\n\n    return \"Yes\"\n"}
{"task_id": "Open/19", "completion": "    # Initialize max_sum as 0\n    max_sum = 0\n    # Initialize xor_sum as 0\n    xor_sum = 0\n    # Initialize a dictionary to store the frequency of xor sums\n    xor_freq = {0: 1}\n    \n    # Iterate through the array\n    for num in arr:\n        # Calculate the XOR sum\n        xor_sum ^= num\n        # If xor_sum is in the dictionary, increment its count\n        if xor_sum in xor_freq:\n            xor_freq[xor_sum] += 1\n        # If xor_sum is not in the dictionary, add it with count 1\n        else:\n            xor_freq[xor_sum] = 1\n        # Update max_sum if the current xor_sum is greater than max_sum\n        max_sum = max(max_sum, xor_sum)\n    \n    # Return the frequency of the maximum XOR sum\n    return xor_freq[max_sum]\n"}
{"task_id": "Open/20", "completion": "    count = 0\n    for i in range(l, r+1):\n        if n & (1 << i):\n            count += 1\n    if count == (r-l+1):\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/21", "completion": "    xorArr = 0\n    for i in range(n):\n        xorArr ^= arr[i]\n    ans = 0\n    for i in range(n):\n        ans = max(ans, xorArr ^ arr[i])\n    return ans\n"}
{"task_id": "Open/22", "completion": "    binary = bin(n)[2:]\n    for i in range(l, r+1):\n        if len(binary) <= i or binary[len(binary)-i-1] != '1':\n            return \"No\"\n    return \"Yes\"\n"}
