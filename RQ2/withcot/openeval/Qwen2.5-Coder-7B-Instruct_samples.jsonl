{"task_id": "Open/1", "completion": "    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    max_length = 0\n    for i in range(n):\n        count = 1\n        for j in range(i+1,n):\n            if set(str(arr[i])) & set(str(arr[j])):\n                count += 1\n        max_length = max(max_length,count)\n    return max_length\n"}
{"task_id": "Open/3", "completion": "    total_time = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            total_time += 1\n        else:\n            B.appendleft(B.pop())\n            A.append(A.pop(0))\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    # Write your code here\n    max_length = 0\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            max_length = i+1\n    return max_length\n"}
{"task_id": "Open/5", "completion": "    # Write your code here\n    max_sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/6", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/7", "completion": "    # Initialize the total time to 0\n    total_time = 0\n    \n    # Convert the lists to deques for efficient popping and appending\n    A = deque(A)\n    B = deque(B)\n    \n    # Iterate through the lists until all elements in A have been compared\n    while A:\n        # Compare the first elements of both deques\n        if A[0] == B[0]:\n            # Increment the total time by 1\n            total_time += 1\n            # Pop the first elements from both deques\n            A.popleft()\n            B.popleft()\n        else:\n            # Move the first element of B to the front\n            B.appendleft(B.popleft())\n            # Move the first element of A to the end\n            A.append(A.popleft())\n            # Increment the total time by 2\n            total_time += 2\n            \n    return total_time\n"}
{"task_id": "Open/8", "completion": "    # Create an empty list to store the missing elements\n    missing = []\n    \n    # Iterate through the input list\n    for i in range(len(vec)):\n        # Change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) <= len(vec):\n            vec[abs(vec[i])-1] *= -1\n    \n    # Iterate through the modified list\n    for i in range(len(vec)):\n        # If the element is positive, append the index plus one to the output list\n        if vec[i] > 0:\n            missing.append(i+1)\n    \n    # Return the output list\n    return missing\n"}
{"task_id": "Open/9", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/10", "completion": "    # Write your code here\n    freq = {}\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 0\n        freq[arr[i]] += 1\n    \n    min_val = float('inf')\n    for key, val in freq.items():\n        if key == val and key < min_val:\n            min_val = key\n            \n    return min_val if min_val != float('inf') else None\n"}
{"task_id": "Open/11", "completion": "    # Initialize an empty list\n    output = []\n    # Iterate through the list of integers\n    for i in range(len(vec)):\n        # Change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) <= len(vec):\n            vec[abs(vec[i])-1] *= -1\n    # Iterate through the modified list\n    for i in range(len(vec)):\n        # Append the indices of the positive elements plus one to the output list\n        if vec[i] > 0:\n            output.append(i+1)\n    # Return the output list\n    return output\n"}
{"task_id": "Open/12", "completion": "    # Step 1: Find the maximum length of an even-length substring consisting only of alphanumeric characters\n    max_len = -1\n    \n    # Step 2: Iterate through all possible substrings of even length in the given string\n    for i in range(len(vec)):\n        for j in range(i+2, len(vec)+1, 2):\n            sub_str = vec[i:j]\n            \n            # Check if the substring consists only of alphanumeric characters\n            if sub_str.isalnum():\n                # Update max_len if the length of the substring is greater than max_len\n                if len(sub_str) > max_len:\n                    max_len = len(sub_str)\n                    \n    # Step 3: Return max_len\n    return max_len\n"}
{"task_id": "Open/13", "completion": "    # Write your code here\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/14", "completion": "    # sort the array\n    arr.sort()\n    min_removal = 0\n    for i in range(n-1):\n        if arr[i+1] - arr[i] > min_removal + 1:\n            min_removal += 1\n    return min_removal\n"}
{"task_id": "Open/15", "completion": "    # Initialize variables\n    total_time = 0\n    \n    # Convert lists to deques for efficient popping and appending\n    A = deque(A)\n    B = deque(B)\n    \n    # Iterate through the lists\n    while A:\n        if A[0] == B[0]:\n            # Increment total time if elements are equal\n            total_time += 1\n            A.popleft()\n            B.popleft()\n        else:\n            # Move elements to the front and back respectively if they are not equal\n            total_time += 2\n            B.appendleft(B.pop())\n            A.append(A.popleft())\n    \n    return total_time\n"}
{"task_id": "Open/16", "completion": "    # Step 1: Initialize an empty string to store the longest substring\n    longest_substring = \"\"\n    temp_string = \"\"\n\n    # Step 2: Iterate through the characters in the input string\n    for char in vec:\n        # If the character is a digit, add it to a temporary string\n        if char.isdigit():\n            temp_string += char\n        # If the character is not a digit, check if the temporary string is longer than the current longest substring\n        else:\n            if len(temp_string) > len(longest_substring):\n                longest_substring = temp_string\n            temp_string = \"\"\n\n    # Step 3: Return the longest substring\n    return longest_substring\n"}
{"task_id": "Open/17", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n\n    masked_n = n & mask\n    \n    # Check if all bits in the range are set\n    if masked_n == ((1 << r) - 1) ^ ((1 << (l - 1)) - 1):\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/18", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    # Apply the mask to n and check if all bits in the range are set\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
{"task_id": "Open/19", "completion": "    # Write your code here\n    min_val = float('inf')\n    freq = 0\n    \n    for i in range(n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        elif arr[i] == min_val:\n            freq += 1\n            \n    return freq\n"}
{"task_id": "Open/20", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n\n    masked_n = n & mask\n    \n    # Check if all bits in the masked region are set\n    return \"Yes\" if masked_n == ((1 << r) - 1) else \"No\"\n"}
{"task_id": "Open/21", "completion": "    # Write your code here\n    xorArr = 0\n    for i in range(n):\n        xorArr ^= arr[i]\n    ans = xorArr\n    for i in range(n):\n        xorArr ^= arr[i]\n        if xorArr > ans:\n            ans = xorArr\n    return ans\n"}
{"task_id": "Open/22", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    # Apply the mask to n\n    masked_n = n & mask\n    # Check if all bits in the range are set\n    return \"Yes\" if masked_n == ((1 << r) - 1) else \"No\"\n"}
