{"task_id": "Open/1", "completion": "    # Step 1\n    count = 0\n\n    # Step 2\n    total = sum(arr)\n\n    # Step 3\n    for i in arr:\n        # Step 4\n        if i + K > total:\n            count += 1\n\n    return count\n"}
{"task_id": "Open/2", "completion": "    # Initialize the maximum length and minimum value\n    max_len = 0\n    min_val = float('inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # Update the maximum length and minimum value\n        max_len = max(max_len, arr[i])\n        min_val = min(min_val, arr[i])\n\n    # Initialize the count of minimum value\n    count = 0\n\n    # Iterate over the array again\n    for i in range(n):\n        # If the current value is equal to the minimum value, increment the count\n        if arr[i] == min_val:\n            count += 1\n\n    return count\n"}
{"task_id": "Open/3", "completion": "    def product ( x , y ) :\n        if y < 0 :\n            return -product(x, -y)\n        elif y == 0 :\n            return 0\n        else :\n            return x * y\n\n    total_time = 0\n    A = deque(A)\n    B = deque(B)\n\n    while A :\n        if A[0] == B[0] :\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else :\n            A.append(A.popleft())\n            B.appendleft(B.pop())\n            total_time += 2\n\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    # Initialize minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Traverse the array\n    for i in range(n):\n        # Update minimum value and its frequency if current element is less than min_val\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If current element is equal to min_val, increment frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/5", "completion": "    max_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_sum += i\n    return max_sum\n"}
{"task_id": "Open/6", "completion": "    max_diff = 0\n    for i in range(n):\n        max_diff = max(max_diff, abs(i - arr[i]))\n    return max_diff\n"}
{"task_id": "Open/7", "completion": "    time = 0\n    A.sort()\n    B.sort()\n    while A and B:\n        if A[0] == B[0]:\n            A.pop(0)\n            B.pop(0)\n            time += 1\n        else:\n            A.append(A.pop(0))\n            B.append(B.pop(0))\n            time += 2\n    return time\n"}
{"task_id": "Open/8", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/9", "completion": "    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    modified_arr_len = 0\n    for key, value in count_dict.items():\n        if value > k:\n            modified_arr_len += value\n\n    return modified_arr_len\n"}
{"task_id": "Open/10", "completion": "    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    min_value = min(count_dict.values())\n    for key, value in count_dict.items():\n        if value == min_value:\n            return key\n\n    return None\n"}
{"task_id": "Open/11", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/12", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/13", "completion": "    count = 0\n    while n > 1:\n        n = n // 2\n        count += 1\n    return count\n"}
{"task_id": "Open/14", "completion": "    # Initialize the minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current value is less than the minimum value, update the minimum value and reset the frequency\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If the current value is equal to the minimum value, increment the frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/15", "completion": "    max_set_bits = 0\n    for left, right in zip(A, B):\n        left_bin = bin(left)[2:]\n        right_bin = bin(right)[2:]\n        max_set_bits += sum(i != j for i, j in zip(left_bin, right_bin))\n    return max_set_bits * 2\n"}
{"task_id": "Open/16", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/17", "completion": "    N = n\n    M = min(n, l)\n    K = r - l + 1\n    while K > 0:\n        if N > M:\n            N -= M\n        elif M > N:\n            M -= N\n        else:\n            return 0\n    return N * M\n"}
{"task_id": "Open/18", "completion": "    if n == 1 :\n        return r - l + 1\n    elif n > 1 :\n        return r - l + 1 - (n - 2)\n    else :\n        return 0\n"}
{"task_id": "Open/19", "completion": "    max_sum = 0\n    for i in range(n):\n        left_sum = sum(arr[:i])\n        right_sum = sum(arr[i+1:])\n        curr_sum = left_sum ^ right_sum ^ arr[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"}
{"task_id": "Open/20", "completion": "    def countBits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    return 'Yes' if all(countBits(i) == countBits(n) for i in range(l, r + 1)) else 'No'\n"}
{"task_id": "Open/21", "completion": "    xorArr = 0\n    for i in range(n) :\n        xorArr ^= arr[i]\n    ans = xorArr\n    for i in range(n) :\n        ans = max(ans, xorArr ^ arr[i])\n    return ans\n"}
{"task_id": "Open/22", "completion": "    def binary_repr(n):\n        return bin(n)[2:]\n\n    def sort_integers(n, l, r):\n        return sorted([n, l, r])\n\n    def sum_of_smallest_two(n, l, r):\n        return sum(sort_integers(n, l, r)[:2])\n\n    def difference_between_sum_and_max(n, l, r):\n        return sum_of_smallest_two(n, l, r) - max(sort_integers(n, l, r))\n\n    return \"Yes\" if all(int(bit) == 1 for bit in binary_repr(n)[l:r+1]) else \"No\"\n\n"}
