{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = len(max(strings))\n    for s in strings:\n        if len(s) == max_len:\n            return s\n\n    return None\n\n"}
{"task_id": "HumanEval/25", "completion": "    if n < 2:\n        return []\n    factors = []\n    # Divide by 2 as many times as possible\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd factors starting from 3\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/65", "completion": "    # Step 1: Convert the integer x to a string\n    str_x = str(x)\n    \n    # Step 2: Get the length of the string\n    len_str_x = len(str_x)\n    \n    # Step 3: If shift > length, reverse the digits of the string and return\n    if shift > len_str_x:\n        return str_x[::-1]\n    \n    # Step 4: Calculate the number of digits to shift\n    shift %= len_str_x\n    \n    # Step 5: Shift the digits to the right\n    shifted_str = str_x[-shift:] + str_x[:-shift]\n    \n    # Step 6: Append the last digit to the sliced string\n    final_str = shifted_str + str_x[-1]\n    \n    # Step 7: Return the resulting string\n    return final_str\n"}
{"task_id": "HumanEval/69", "completion": "    # Step 1: Initialize a dictionary to store the frequency of each integer in the list.\n    freq_dict = {}\n    \n    # Step 2: Iterate through the list and update the frequency of each integer in the dictionary.\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Step 3: Iterate through the dictionary and find the greatest integer that has a frequency greater than or equal to its value.\n    result = -1\n    for key, value in freq_dict.items():\n        if key <= value and key > result:\n            result = key\n    \n    # Step 4: If no such integer exists, return -1. \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "    # Step 1: Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Step 2: Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Step 3: Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Step 4: Round the area to 2 decimal points\n    area_rounded = round(area, 2)\n    \n    return area_rounded\n"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/76", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/90", "completion": "Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime += num\n\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/102", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            # Calculate the sum of the digits excluding the first negative sign\n            sum_digits = sum(int(digit) for digit in str(num)[1:])\n        else:\n            # Calculate the sum of the digits\n            sum_digits = sum(int(digit) for digit in str(num))\n        \n        if sum_digits > 0:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/109", "completion": "    # Step 1: Check if the given array is empty\n    if len(arr) == 0:\n        return True\n    \n    # Step 2: Iterate through the array from the last element to the first element\n    for i in range(len(arr)-1, 0, -1):\n        # Step 3: Check if the current element is less than the next element\n        if arr[i] < arr[i-1]:\n            return False\n    \n    # Step 4: Return True\n    return True\n"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/59", "completion": "    # Step 2: Initialize largest_prime\n    largest_prime = 0\n    \n    # Step 3: Iterate through possible factors\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            largest_prime = i\n            \n    # Step 4: Check if n is a prime number greater than 1\n    if n > 1:\n        largest_prime = n\n        \n    return largest_prime\n"}
{"task_id": "HumanEval/138", "completion": "    # Since the smallest sum of four even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such a sum.\n    if n < 8:\n        return False\n    \n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of four even numbers.\n    return n % 2 == 0\n"}
{"task_id": "HumanEval/77", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/153", "completion": "    # Step 2: Iterate through each extension\n    for extension in extensions:\n        # Calculate the strength of the extension\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        # Step 3: Update the strongest_extension if necessary\n        if not strongest_extension or strength > strongest_strength:\n            strongest_extension = f\"{class_name}.{extension}\"\n    \n    return strongest_extension\n"}
{"task_id": "HumanEval/156", "completion": "    # Define the mapping of integers to their corresponding Roman numerals\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result += symbol\n            number -= value\n    \n    return result.lower()\n"}
{"task_id": "HumanEval/74", "completion": "    # Your code here\n"}
