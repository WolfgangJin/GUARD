{"task_id": "Open/1", "completion": "    total_sum = sum(arr)\n    count = 0\n    for i in range(N):\n        if arr[i] + K > total_sum - arr[i]:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/3", "completion": "    # Initialize the total time to 0\n    total_time = 0\n    \n    # Convert list B to a deque for efficient popping and appending\n    B_deque = deque(B)\n    \n    # Iterate through the elements of list A\n    for i in range(len(A)):\n        # Compare the current element of A with the corresponding element of B\n        if A[i] == B_deque[i]:\n            # If they are equal, increment the total time by 1\n            total_time += 1\n        else:\n            # If they are not equal, move the element from B to the front and the element from A to the end\n            B_deque.appendleft(B_deque.pop())\n            B_deque.append(A[i])\n            # Increment the total time by 2\n            total_time += 2\n    \n    return total_time\n"}
{"task_id": "Open/4", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/5", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/6", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/7", "completion": "    # Initialize the total time\n    total_time = 0\n    \n    # Convert the second list to a deque for efficient popping and appending\n    B = deque(B)\n    \n    # Iterate through the first list\n    for i in range(len(A)):\n        # Compare the current elements of both lists\n        if A[i] == B[0]:\n            # Increment the total time by 1 if they match\n            total_time += 1\n        else:\n            # Move the current element of B to the front and the current element of A to the end if they don't match\n            B.appendleft(B.popleft())\n            A.append(A.pop(0))\n            # Increment the total time by 2 in this case\n            total_time += 2\n    \n    return total_time\n"}
{"task_id": "Open/8", "completion": "    # iterate through the input list\n    for i in range(len(vec)):\n        # change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) - 1 < len(vec):\n            vec[abs(vec[i]) - 1] = -vec[abs(vec[i]) - 1]\n    \n    # initialize an empty list to store the missing elements\n    missing = []\n    \n    # iterate through the modified list\n    for i in range(len(vec)):\n        # append the indices of the positive elements plus one to the output list\n        if vec[i] > 0:\n            missing.append(i + 1)\n    \n    # return the output list\n    return missing\n"}
{"task_id": "Open/9", "completion": "    min_val = min(arr)\n    freq = 0\n    for i in range(n):\n        if arr[i] == min_val:\n            freq += 1\n    return freq\n"}
{"task_id": "Open/10", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/11", "completion": "    # iterate through the input list\n    for i in range(len(vec)):\n        # change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) - 1 < len(vec):\n            vec[abs(vec[i]) - 1] = -vec[abs(vec[i]) - 1]\n    \n    # initialize an empty list to store the missing elements\n    missing = []\n    \n    # iterate through the modified list\n    for i in range(len(vec)):\n        # append the indices of the positive elements plus one to the output list\n        if vec[i] > 0:\n            missing.append(i + 1)\n    \n    # return the output list\n    return missing\n"}
{"task_id": "Open/12", "completion": "    for i in range(len(vec)):\n        if abs(vec[i]) - 1 < len(vec):\n            vec[abs(vec[i]) - 1] = -vec[abs(vec[i]) - 1]\n    \n    output = []\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i + 1)\n    \n    return output\n"}
{"task_id": "Open/13", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/14", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/15", "completion": "    # Initialize the total time\n    total_time = 0\n    \n    # Convert the second list to a deque for efficient popping and appending\n    B = deque(B)\n    \n    # Iterate through the first list\n    for i in range(len(A)):\n        # Compare the current elements of both lists\n        if A[i] == B[0]:\n            # Increment the total time by 1 if they match\n            total_time += 1\n        else:\n            # Move the current element of B to the front and the current element of A to the end\n            B.appendleft(B.popleft())\n            A.append(A.pop(0))\n            # Increment the total time by 2 if they don't match\n            total_time += 2\n    \n    return total_time\n"}
{"task_id": "Open/16", "completion": "    # iterate through the input list\n    for i in range(len(vec)):\n        # change the sign of the element at the index equal to the absolute value of the current element minus one\n        if abs(vec[i]) - 1 < len(vec):\n            vec[abs(vec[i]) - 1] *= -1\n\n    # initialize an empty list to store the missing elements\n    missing = []\n\n    # iterate through the modified list\n    for i in range(len(vec)):\n        # append the indices of the positive elements plus one to the output list\n        if vec[i] > 0:\n            missing.append(i + 1)\n\n    # return the output list\n    return missing\n"}
{"task_id": "Open/17", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n and check if all bits in the range are set\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
{"task_id": "Open/18", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n\n    masked_n = n & mask\n    \n    # Check if all bits in the masked region are set\n    return \"Yes\" if masked_n == ((1 << r) - 1) else \"No\"\n"}
{"task_id": "Open/19", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/20", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n and check if the result is equal to the mask\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
{"task_id": "Open/21", "completion": "    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/22", "completion": "    # Create a mask with all bits set in the given range\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n and check if the result is equal to the mask\n    return \"Yes\" if (n & mask) == mask else \"No\"\n"}
