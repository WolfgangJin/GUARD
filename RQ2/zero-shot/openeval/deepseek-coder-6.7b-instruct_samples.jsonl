{"task_id": "Open/1", "completion": "    sum_arr = sum(arr)\n    count = 0\n    for i in arr:\n        if i + K > sum_arr - i:\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/3", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/5", "completion": "    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/6", "completion": "    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/7", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/8", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    missing = [i+1 for i in range(len(vec)) if vec[i] > 0]\n    return missing\n"}
{"task_id": "Open/9", "completion": "    # Write your code here\n    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/10", "completion": "    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/11", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/12", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec):\n            vec[abs(vec[i])-1] = -abs(vec[i])\n    missing = [i+1 for i in range(len(vec)) if vec[i] > 0]\n    return missing\n"}
{"task_id": "Open/13", "completion": "    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/14", "completion": "    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/15", "completion": "    A = deque(A)\n    B = deque(B)\n    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            total_time += 1\n        else:\n            B.appendleft(B.popleft())\n            A.append(A.popleft())\n            total_time += 2\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    for i in range(len(vec)):\n        if abs(vec[i])-1 < len(vec) and vec[abs(vec[i])-1] > 0:\n            vec[abs(vec[i])-1] = -vec[abs(vec[i])-1]\n    return [i+1 for i in range(len(vec)) if vec[i] > 0]\n"}
{"task_id": "Open/17", "completion": "    binary = bin(n)[2:]\n    for i in range(l, r+1):\n        if len(binary) <= i or binary[-i-1] != '1':\n            return \"No\"\n    return \"No\" if len(binary) <= r+1 else \"Yes\"\n"}
{"task_id": "Open/18", "completion": "    # convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    # check each bit in the given range\n    for i in range(l, r+1):\n        if i >= len(binary) or binary[-i-1] != '1':\n            return \"No\"\n    return \"No\"\n"}
{"task_id": "Open/19", "completion": "    # Your code here\n    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/20", "completion": "    # convert the number to binary\n    binary = bin(n)[2:]\n    # get the substring from l to r\n    substring = binary[l:r+1]\n    # check if all bits are set to 1\n    if substring.count('1') == len(substring):\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "Open/21", "completion": "    # Your code here\n    min_val = min(arr)\n    return arr.count(min_val)\n"}
{"task_id": "Open/22", "completion": "    binary = bin(n)[2:]\n    for i in range(l, r+1):\n        if len(binary) <= i or binary[-i-1] != '1':\n            return \"No\"\n    return \"No\" if len(binary) <= r+1 else \"Yes\"\n"}
