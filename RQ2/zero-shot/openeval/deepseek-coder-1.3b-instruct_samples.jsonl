{"task_id": "Open/1", "completion": "    total_sum = sum(arr)\n    count = 0\n    for i in range(N) :\n        if (arr[i] + K) > total_sum :\n            count += 1\n    return count\n"}
{"task_id": "Open/2", "completion": "    # Initialize the maximum length and minimum value\n    max_len = 0\n    min_val = float('inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # Update the maximum length and minimum value\n        max_len = max(max_len, arr[i])\n        min_val = min(min_val, arr[i])\n\n    # Initialize the count of minimum value\n    count = 0\n\n    # Iterate over the array again\n    for i in range(n):\n        # If the current value is equal to the minimum value, increment the count\n        if arr[i] == min_val:\n            count += 1\n\n    return count\n"}
{"task_id": "Open/3", "completion": "    time = 0\n    A = deque(A)\n    B = deque(B)\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            time += 1\n        else:\n            A.append(A.popleft())\n            B.appendleft(B.pop())\n            time += 2\n    return time\n"}
{"task_id": "Open/4", "completion": "    # Initialize minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Traverse the array\n    for i in range(n):\n        # Update minimum value and its frequency if current element is less than min_val\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If current element is equal to min_val, increment frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/5", "completion": "    if n == 0:\n        return 0\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/6", "completion": "    # Initialize the maximum length of the subarray\n    max_len = 0\n    # Initialize the frequency of the minimum value\n    freq = 0\n    # Iterate over the array\n    for i in range(n) :\n        # Initialize the minimum value and its frequency\n        min_val = arr[i]\n        freq = 1\n        # Iterate over the subarray from i to n\n        for j in range(i, n) :\n            # If the current value is less than the minimum value\n            if arr[j] < min_val :\n                # Update the minimum value and its frequency\n                min_val = arr[j]\n                freq += 1\n            # If the current value is equal to the minimum value\n            elif arr[j] == min_val :\n                # Increase the frequency\n                freq += 1\n        # If the length of the subarray is greater than the maximum length\n        if max_len < freq :\n            # Update the maximum length\n            max_len = freq\n    # Return the frequency of the minimum value\n    return freq\n"}
{"task_id": "Open/7", "completion": "    time = 0\n    A.sort()\n    B.sort()\n    queue_A = deque(A)\n    queue_B = deque(B)\n    while queue_A and queue_B:\n        if queue_A[0] == queue_B[0]:\n            queue_A.popleft()\n            queue_B.popleft()\n            time += 2\n        else:\n            queue_A.append(queue_A.popleft())\n            queue_B.append(queue_B.popleft())\n            time += 1\n    return time\n"}
{"task_id": "Open/8", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/9", "completion": "    # Initialize the maximum length of the subarray\n    max_len = 0\n\n    # Initialize the sum of the subarray\n    sum = 0\n\n    # Initialize the minimum value in the array\n    min_val = float('inf')\n\n    # Iterate over the array\n    for i in range(n) :\n        # Update the sum of the subarray\n        sum += arr[i]\n\n        # Update the minimum value in the array\n        min_val = min(min_val, arr[i])\n\n        # If the sum is negative, reset the sum to 0\n        if sum < 0 :\n            sum = 0\n\n        # Update the maximum length of the subarray\n        max_len = max(max_len, i + 1 - sum)\n\n    # Return the maximum length of the subarray\n    return max_len\n"}
{"task_id": "Open/10", "completion": "    # Initialize the maximum length of the subarray\n    max_len = 0\n\n    # Initialize the frequency of the minimum value\n    freq = 0\n\n    # Iterate over the array\n    for i in range(n) :\n        # Iterate over the subarray\n        for j in range(i, n) :\n            # Calculate the length of the subarray\n            len_subarray = j - i + 1\n\n            # If the length of the subarray is greater than the maximum length\n            if len_subarray > max_len :\n                # Update the maximum length\n                max_len = len_subarray\n\n                # Initialize the frequency of the minimum value\n                freq = 0\n\n                # Iterate over the subarray\n                for k in range(i, j + 1) :\n                    # If the value at the current index is less than the minimum value\n                    if arr[k] < arr[i] :\n                        # Increment the frequency\n                        freq += 1\n\n                # Return the frequency\n                return freq\n\n    # Return the maximum length\n    return max_len\n"}
{"task_id": "Open/11", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i])-1] = -abs(vec[abs(vec[i])-1])\n    return [i+1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/12", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/13", "completion": "    if n == 0:\n        return 0\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n"}
{"task_id": "Open/14", "completion": "    # Initialize the minimum value and its frequency\n    min_val = arr[0]\n    freq = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current value is less than the minimum value, update the minimum value and reset the frequency\n        if arr[i] < min_val:\n            min_val = arr[i]\n            freq = 1\n        # If the current value is equal to the minimum value, increment the frequency\n        elif arr[i] == min_val:\n            freq += 1\n\n    return freq\n"}
{"task_id": "Open/15", "completion": "    time = 0\n    A = deque(A)\n    B = deque(B)\n    while A:\n        if A[0] == B[0]:\n            A.popleft()\n            B.popleft()\n            time += 1\n        else:\n            A.append(A.popleft())\n            B.appendleft(B.pop())\n            time += 2\n    return time\n"}
{"task_id": "Open/16", "completion": "    n = len(vec)\n    for i in range(n):\n        vec[abs(vec[i]) - 1] = -abs(vec[abs(vec[i]) - 1])\n    return [i + 1 for i, x in enumerate(vec) if x > 0]\n"}
{"task_id": "Open/17", "completion": "    binary = bin(n)[2:]\n    for bit in binary:\n        if bit != '1':\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/18", "completion": "    # Convert the given number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Check if the binary representation of n is within the range from l to r\n    if len(binary) < l or len(binary) > r:\n        return \"No\"\n    \n    # Check if all bits in the binary representation of n are set to 1\n    for bit in binary:\n        if bit != '1':\n            return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "Open/19", "completion": "    # Initialize the maximum length of the subarray\n    max_len = 0\n\n    # Initialize the frequency of the minimum value\n    freq = 0\n\n    # Iterate over the array\n    for i in range(n) :\n\n        # Initialize the minimum value and its frequency\n        min_val = arr[i]\n        min_freq = 1\n\n        # Iterate over the subarray from i to n\n        for j in range(i, n) :\n\n            # If the current element is less than the minimum value\n            if arr[j] < min_val :\n\n                # Update the minimum value and its frequency\n                min_val = arr[j]\n                min_freq = 1\n\n            # If the current element is equal to the minimum value\n            elif arr[j] == min_val :\n\n                # Increment the frequency\n                min_freq += 1\n\n            # Update the maximum length of the subarray\n            max_len = max(max_len, j - i + 1)\n\n        # Update the frequency of the minimum value\n        freq = max("}
{"task_id": "Open/20", "completion": "    # Convert n to binary and remove the '0b' prefix\n    n_bin = bin(n)[2:]\n    \n    # Check if all bits are set to 1\n    for bit in n_bin:\n        if bit != '1':\n            return \"No\"\n    \n    # Check if all bits are within the range\n    for i in range(l, r + 1):\n        if i not in range(0, len(n_bin)):\n            return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "Open/21", "completion": "    # Initialize the maximum length of the subarray\n    max_len = 0\n\n    # Initialize the sum of the subarray\n    sum = 0\n\n    # Initialize the minimum value\n    min_val = float('inf')\n\n    # Iterate over the array\n    for i in range(n) :\n        # Update the sum of the subarray\n        sum += arr[i]\n\n        # Update the minimum value\n        min_val = min(min_val, arr[i])\n\n        # If the sum is negative, reset the sum and minimum value\n        if sum < 0 :\n            sum = 0\n            min_val = float('inf')\n\n        # Update the maximum length of the subarray\n        max_len = max(max_len, sum)\n\n    # Return the maximum length of the subarray\n    return max_len\n"}
{"task_id": "Open/22", "completion": "    # Convert n to binary and remove the '0b' prefix\n    n_bin = bin(n)[2:]\n\n    # Check if all bits in the binary representation are set to 1\n    for bit in n_bin:\n        if bit != '1':\n            return 'No'\n\n    # Check if all bits in the binary representation are within the range [l, r]\n    for i in range(l, r + 1):\n        if i >= len(n_bin):\n            return 'No'\n        if n_bin[i] != '1':\n            return 'No'\n\n    return 'Yes'\n"}
