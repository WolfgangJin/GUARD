{"task_id": "Open/1", "completion": "    # Calculate the sum of all the elements in the array\n    totalSum = sum(arr)\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # Iterate over each element in the array\n    for i in range(N):\n        # Check if increasing the current element by K would make it greater than the total sum\n        if (arr[i] + K) > totalSum:\n            # Increment the count\n            count += 1\n            \n    # Return the count\n    return count\n"}
{"task_id": "Open/2", "completion": "    minVal = min ( arr )\n    freq = 0\n    for i in range ( n ) :\n        if arr [ i ] == minVal :\n            freq += 1\n    return freq\n"}
{"task_id": "Open/3", "completion": "    total_time = 0\n    while A:\n        if A[0] == B[0]:\n            total_time += 1\n            A.pop(0)\n            B.pop(0)\n        else:\n            total_time += 2\n            B.appendleft(B.pop())\n            A.append(A.pop(0))\n    return total_time\n"}
{"task_id": "Open/4", "completion": "    minVal = min(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == minVal:\n            count += 1\n    return count\n"}
{"task_id": "Open/5", "completion": "    min_val = min ( arr )\n    freq = 0\n    for i in range ( n ) :\n        if arr [ i ] == min_val :\n            freq += 1\n    return freq\n"}
{"task_id": "Open/6", "completion": "    minVal = min ( arr )\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] == minVal :\n            count += 1\n    return count\n\narr = [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nn = len ( arr )\n"}
{"task_id": "Open/7", "completion": "    total_time = 0\n    queue_A = deque(A)\n    queue_B = deque(B)\n\n    while queue_A:\n        if queue_A[0] == queue_B[0]:\n            total_time += 1\n            queue_A.popleft()\n            queue_B.popleft()\n        else:\n            total_time += 2\n            queue_B.appendleft(queue_B.pop())\n            queue_A.appendright(queue_A.popleft())\n\n    return total_time\n"}
{"task_id": "Open/8", "completion": "    output = []\n    for i in range(len(vec)):\n        if abs(vec[i]) < len(vec):\n            vec[abs(vec[i])-1] *= -1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/9", "completion": "    min_val = min ( arr )\n    freq_min_val = arr.count ( min_val )\n\n    return freq_min_val\n"}
{"task_id": "Open/10", "completion": "    min_val = min ( arr )\n    freq_min_val = 0\n    for i in range ( n ) :\n        if arr [ i ] == min_val :\n            freq_min_val += 1\n    return freq_min_val\n"}
{"task_id": "Open/11", "completion": "    # Initialize an empty list to store the missing elements\n    missing = []\n    \n    # Iterate through the input list\n    for i in range(len(vec)):\n        # If the current element is negative, change its sign\n        if vec[i] < 0:\n            vec[abs(vec[i]) - 1] *= -1\n    \n    # Iterate through the modified list\n    for i in range(len(vec)):\n        # If the current element is positive, append its index plus one to the missing list\n        if vec[i] > 0:\n            missing.append(i + 1)\n    \n    # Return the missing list\n    return missing\n"}
{"task_id": "Open/12", "completion": "    output = []\n    for i in range(len(vec)):\n        if abs(vec[i]) < len(vec):\n            vec[abs(vec[i])-1] *= -1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/13", "completion": "    minVal = float('inf')\n    for i in range(0, n) :\n        if arr[i] < minVal :\n            minVal = arr[i]\n    \n    freq = 0\n    for i in range(0, n) :\n        if arr[i] == minVal :\n            freq += 1\n    \n    return freq\n"}
{"task_id": "Open/14", "completion": "    min_val = min ( arr )\n    freq_min = 0\n    for i in range ( n ) :\n        if arr [ i ] == min_val :\n            freq_min += 1\n    return freq_min\n"}
{"task_id": "Open/15", "completion": "    # Initialize variables\n    total_time = 0\n    A_deque = deque(A)\n    B_deque = deque(B)\n\n    while A_deque:\n        if A_deque[0] == B_deque[0]:\n            total_time += 1\n            A_deque.popleft()\n            B_deque.popleft()\n        else:\n            total_time += 2\n            B_deque.appendleft(B_deque.pop())\n            A_deque.append(A_deque.popleft())\n\n    return total_time\n"}
{"task_id": "Open/16", "completion": "    output = []\n    for i in range(len(vec)):\n        if abs(vec[i]) < len(vec):\n            vec[abs(vec[i])-1] *= -1\n    for i in range(len(vec)):\n        if vec[i] > 0:\n            output.append(i+1)\n    return output\n"}
{"task_id": "Open/17", "completion": "    # Check if all bits in the given range are set\n    for i in range ( l , r + 1 ) :\n        if ( n & ( 1 << i ) == 0 ) :\n            return \"No\"\n    return \"Yes\"\n"}
{"task_id": "Open/18", "completion": "    # Initialize a variable to store the result\n    result = \"\"\n    \n    # Iterate through each bit in the range from l to r\n    for i in range ( l , r + 1 ) :\n        # Check if the ith bit is set to 1\n        if ( n & ( 1 << i ) ) != 0 :\n            # If the bit is set, add '1' to the result string\n            result += \"1\"\n        else :\n            # If the bit is not set, add '0' to the result string\n            result += \"0\"\n    \n    # Return \"Yes\" if all bits are set to 1, otherwise return \"No\"\n    return \"Yes\" if result == \"1\" * ( r - l + 1 ) else \"No\"\n"}
{"task_id": "Open/19", "completion": "    min_val = min ( arr )\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] == min_val :\n            count += 1\n    return count\n"}
{"task_id": "Open/20", "completion": "    # Initialize a variable to store the result\n    result = \"\"\n    \n    # Iterate over the range from l to r\n    for i in range( l , r + 1 ) :\n        # Check if the ith bit is set to 1\n        if ( n & ( 1 << i ) ) != 0 :\n            # If yes, add '1' to the result string\n            result += \"1\"\n        else :\n            # If no, add '0' to the result string\n            result += \"0\"\n    \n    # Return the result string\n    return result\n"}
{"task_id": "Open/21", "completion": "    min_val = min ( arr )\n    freq_min = 0\n    for i in range ( n ) :\n        if arr [ i ] == min_val :\n            freq_min += 1\n    return freq_min\n\narr = [ 2, 3, 4, 5, 6 ]\nn = len ( arr )\n"}
{"task_id": "Open/22", "completion": "    # Check if all bits in the given range are set\n    for i in range( l , r + 1 ) :\n        if not ( n & ( 1 << i ) ) :\n            return \"No\"\n    \n    return \"Yes\"\n"}
