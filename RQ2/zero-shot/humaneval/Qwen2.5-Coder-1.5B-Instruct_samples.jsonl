{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = len(max(strings))\n    for s in strings:\n        if len(s) == max_len:\n            return s\n\n    return None\n\n"}
{"task_id": "HumanEval/25", "completion": "    if n < 2:\n        return []\n    factors = []\n    # Divide by 2 as many times as possible\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd factors starting from 3\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    if shift >= len(num_str):\n        return num_str[::-1]\n    else:\n        shifted_str = num_str[-shift:] + num_str[:-shift]\n        return shifted_str\n"}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    count = Counter(lst)\n    for num, freq in count.items():\n        if num <= freq and num > 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/71", "completion": "    # Check for valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round to 2 decimal points\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/76", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/90", "completion": "    # Your code here\n"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n\n    return -1\n"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n < 0:\n            return -sum_of_digits(-n)\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    # Write your code here\n"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/59", "completion": "    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        n //= 2\n    \n    # Now n must be odd, start checking from 3\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, divide n\n        while n % i == 0:\n            n //= i\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        return n\n    \n    return None\n"}
{"task_id": "HumanEval/138", "completion": "    # Since the smallest sum of four even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such a sum.\n    if n < 8:\n        return False\n    \n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of four even numbers.\n    return n % 2 == 0\n"}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/153", "completion": "\n    max_strength = float('-inf')\n    strongest_ext = ''\n    \n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"\n"}
{"task_id": "HumanEval/156", "completion": "    # Define the mapping of integers to their corresponding Roman numerals\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result += symbol\n            number -= value\n    \n    return result.lower()\n"}
{"task_id": "HumanEval/74", "completion": "    # Your code here\n"}
